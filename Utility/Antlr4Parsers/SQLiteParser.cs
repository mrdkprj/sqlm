//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\C#\VS2012\MasudaManager\MasudaManager\MasudaManager\Grammars\SQLite.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MasudaManager {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class SQLiteParser : Parser {
	public const int
		T__0=1, SCOL=2, DOT=3, OPEN_PAR=4, CLOSE_PAR=5, COMMA=6, ASSIGN=7, STAR=8, 
		PLUS=9, MINUS=10, TILDE=11, PIPE2=12, DIV=13, MOD=14, LT2=15, GT2=16, 
		AMP=17, PIPE=18, LT=19, LT_EQ=20, GT=21, GT_EQ=22, EQ=23, NOT_EQ1=24, 
		NOT_EQ2=25, K_ABORT=26, K_ACTION=27, K_ADD=28, K_AFTER=29, K_ALL=30, K_ALTER=31, 
		K_ANALYZE=32, K_AND=33, K_AS=34, K_ASC=35, K_ATTACH=36, K_AUTOINCREMENT=37, 
		K_BEFORE=38, K_BEGIN=39, K_BETWEEN=40, K_BY=41, K_CASCADE=42, K_CASE=43, 
		K_CACHE=44, K_CAST=45, K_CHECK=46, K_COLLATE=47, K_COLUMN=48, K_COMMIT=49, 
		K_CONFLICT=50, K_CONNECT=51, K_CONSTRAINT=52, K_CONSTRAINTS=53, K_CREATE=54, 
		K_CROSS=55, K_CURRENT_DATE=56, K_CURRENT_TIME=57, K_CURRENT_TIMESTAMP=58, 
		K_CYCLE=59, K_DATABASE=60, K_DEFAULT=61, K_DEFERRABLE=62, K_DEFERRED=63, 
		K_DELETE=64, K_DESC=65, K_DISCONNECT=66, K_DETACH=67, K_DISTINCT=68, K_DROP=69, 
		K_EACH=70, K_ELSE=71, K_END=72, K_ESCAPE=73, K_EXCEPT=74, K_EXCLUSIVE=75, 
		K_EXISTS=76, K_EXPLAIN=77, K_FAIL=78, K_FOR=79, K_FOREIGN=80, K_FROM=81, 
		K_FULL=82, K_GLOB=83, K_GROUP=84, K_HAVING=85, K_IF=86, K_IGNORE=87, K_IMMEDIATE=88, 
		K_IN=89, K_INCREMENT=90, K_INDEX=91, K_INDEXED=92, K_INITIALLY=93, K_INNER=94, 
		K_INSERT=95, K_INSTEAD=96, K_INTERSECT=97, K_INTO=98, K_IS=99, K_ISNULL=100, 
		K_JOIN=101, K_KEY=102, K_LEFT=103, K_LIKE=104, K_LIMIT=105, K_MATCH=106, 
		K_MINVALUE=107, K_MODIFY=108, K_MAXVALUE=109, K_NATURAL=110, K_NO=111, 
		K_NOT=112, K_NOTNULL=113, K_NULL=114, K_OF=115, K_OFFSET=116, K_ON=117, 
		K_OR=118, K_ORDER=119, K_OUTER=120, K_PLAN=121, K_PRAGMA=122, K_PRIMARY=123, 
		K_PURGE=124, K_QUERY=125, K_RAISE=126, K_RECURSIVE=127, K_REFERENCES=128, 
		K_REGEXP=129, K_REINDEX=130, K_RELEASE=131, K_RENAME=132, K_REPLACE=133, 
		K_RESTRICT=134, K_RIGHT=135, K_ROLLBACK=136, K_ROW=137, K_SAVEPOINT=138, 
		K_SELECT=139, K_SET=140, K_SEQUENCE=141, K_START=142, K_SYSDBA=143, K_SYSOPER=144, 
		K_TABLE=145, K_TEMP=146, K_TEMPORARY=147, K_THEN=148, K_TO=149, K_TRANSACTION=150, 
		K_TRIGGER=151, K_UNION=152, K_UNIQUE=153, K_UPDATE=154, K_USING=155, K_VACUUM=156, 
		K_VALUES=157, K_VIEW=158, K_VIRTUAL=159, K_WHEN=160, K_WHERE=161, K_WITH=162, 
		K_WITHOUT=163, IDENTIFIER=164, NUMERIC_LITERAL=165, BIND_PARAMETER=166, 
		STRING_LITERAL=167, BLOB_LITERAL=168, SINGLE_LINE_COMMENT=169, MULTILINE_COMMENT=170, 
		SPACES=171, UNEXPECTED_CHAR=172;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'@'", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", 
		"'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", 
		"'<='", "'>'", "'>='", "'=='", "'!='", "'<>'", "K_ABORT", "K_ACTION", 
		"K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", 
		"K_ASC", "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", 
		"K_BY", "K_CASCADE", "K_CASE", "K_CACHE", "K_CAST", "K_CHECK", "K_COLLATE", 
		"K_COLUMN", "K_COMMIT", "K_CONFLICT", "K_CONNECT", "K_CONSTRAINT", "K_CONSTRAINTS", 
		"K_CREATE", "K_CROSS", "K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", 
		"K_CYCLE", "K_DATABASE", "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
		"K_DESC", "K_DISCONNECT", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
		"K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS", 
		"K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", "K_GLOB", 
		"K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INCREMENT", 
		"K_INDEX", "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", 
		"K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KEY", "K_LEFT", 
		"K_LIKE", "K_LIMIT", "K_MATCH", "K_MINVALUE", "K_MODIFY", "K_MAXVALUE", 
		"K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", "K_OFFSET", 
		"K_ON", "K_OR", "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", 
		"K_PURGE", "K_QUERY", "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
		"K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT", 
		"K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", "K_SET", "K_SEQUENCE", 
		"K_START", "K_SYSDBA", "K_SYSOPER", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
		"K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", "K_UNIQUE", 
		"K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", 
		"K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", 
		"BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
		"MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR"
	};
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_cmd_stmt_list = 2, RULE_cmd_stmt = 3, 
		RULE_connect_stmt = 4, RULE_disconnect_stmt = 5, RULE_sql_stmt_list = 6, 
		RULE_sql_stmt = 7, RULE_alter_table_stmt = 8, RULE_create_sequence_stmt = 9, 
		RULE_drop_sequence_stmt = 10, RULE_analyze_stmt = 11, RULE_attach_stmt = 12, 
		RULE_begin_stmt = 13, RULE_commit_stmt = 14, RULE_compound_select_stmt = 15, 
		RULE_create_index_stmt = 16, RULE_create_table_stmt = 17, RULE_create_trigger_stmt = 18, 
		RULE_create_view_stmt = 19, RULE_create_virtual_table_stmt = 20, RULE_delete_stmt = 21, 
		RULE_delete_stmt_limited = 22, RULE_detach_stmt = 23, RULE_drop_index_stmt = 24, 
		RULE_drop_table_stmt = 25, RULE_drop_trigger_stmt = 26, RULE_drop_view_stmt = 27, 
		RULE_factored_select_stmt = 28, RULE_insert_stmt = 29, RULE_pragma_stmt = 30, 
		RULE_reindex_stmt = 31, RULE_release_stmt = 32, RULE_rollback_stmt = 33, 
		RULE_savepoint_stmt = 34, RULE_simple_select_stmt = 35, RULE_select_stmt = 36, 
		RULE_select_or_values = 37, RULE_update_stmt = 38, RULE_update_stmt_limited = 39, 
		RULE_vacuum_stmt = 40, RULE_column_def = 41, RULE_type_name = 42, RULE_column_constraint = 43, 
		RULE_conflict_clause = 44, RULE_expr = 45, RULE_foreign_key_clause = 46, 
		RULE_raise_function = 47, RULE_indexed_column = 48, RULE_table_constraint = 49, 
		RULE_with_clause = 50, RULE_qualified_table_name = 51, RULE_ordering_term = 52, 
		RULE_pragma_value = 53, RULE_common_table_expression = 54, RULE_result_column = 55, 
		RULE_table_or_subquery = 56, RULE_join_clause = 57, RULE_join_operator = 58, 
		RULE_join_constraint = 59, RULE_select_core = 60, RULE_compound_operator = 61, 
		RULE_cte_table_name = 62, RULE_signed_number = 63, RULE_literal_value = 64, 
		RULE_unary_operator = 65, RULE_error_message = 66, RULE_module_argument = 67, 
		RULE_column_alias = 68, RULE_keyword = 69, RULE_name = 70, RULE_function_name = 71, 
		RULE_database_name = 72, RULE_table_name = 73, RULE_table_or_index_name = 74, 
		RULE_new_table_name = 75, RULE_column_name = 76, RULE_collation_name = 77, 
		RULE_foreign_table = 78, RULE_index_name = 79, RULE_trigger_name = 80, 
		RULE_view_name = 81, RULE_module_name = 82, RULE_pragma_name = 83, RULE_savepoint_name = 84, 
		RULE_table_alias = 85, RULE_transaction_name = 86, RULE_any_name = 87;
	public static readonly string[] ruleNames = {
		"parse", "error", "cmd_stmt_list", "cmd_stmt", "connect_stmt", "disconnect_stmt", 
		"sql_stmt_list", "sql_stmt", "alter_table_stmt", "create_sequence_stmt", 
		"drop_sequence_stmt", "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
		"compound_select_stmt", "create_index_stmt", "create_table_stmt", "create_trigger_stmt", 
		"create_view_stmt", "create_virtual_table_stmt", "delete_stmt", "delete_stmt_limited", 
		"detach_stmt", "drop_index_stmt", "drop_table_stmt", "drop_trigger_stmt", 
		"drop_view_stmt", "factored_select_stmt", "insert_stmt", "pragma_stmt", 
		"reindex_stmt", "release_stmt", "rollback_stmt", "savepoint_stmt", "simple_select_stmt", 
		"select_stmt", "select_or_values", "update_stmt", "update_stmt_limited", 
		"vacuum_stmt", "column_def", "type_name", "column_constraint", "conflict_clause", 
		"expr", "foreign_key_clause", "raise_function", "indexed_column", "table_constraint", 
		"with_clause", "qualified_table_name", "ordering_term", "pragma_value", 
		"common_table_expression", "result_column", "table_or_subquery", "join_clause", 
		"join_operator", "join_constraint", "select_core", "compound_operator", 
		"cte_table_name", "signed_number", "literal_value", "unary_operator", 
		"error_message", "module_argument", "column_alias", "keyword", "name", 
		"function_name", "database_name", "table_name", "table_or_index_name", 
		"new_table_name", "column_name", "collation_name", "foreign_table", "index_name", 
		"trigger_name", "view_name", "module_name", "pragma_name", "savepoint_name", 
		"table_alias", "transaction_name", "any_name"
	};

	public override string GrammarFileName { get { return "SQLite.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SQLiteParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public IReadOnlyList<Sql_stmt_listContext> sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(SQLiteParser.Eof, 0); }
		public IReadOnlyList<ErrorContext> error() {
			return GetRuleContexts<ErrorContext>();
		}
		public Cmd_stmt_listContext cmd_stmt_list(int i) {
			return GetRuleContext<Cmd_stmt_listContext>(i);
		}
		public IReadOnlyList<Cmd_stmt_listContext> cmd_stmt_list() {
			return GetRuleContexts<Cmd_stmt_listContext>();
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_ATTACH) | (1L << K_BEGIN) | (1L << K_COMMIT) | (1L << K_CONNECT) | (1L << K_CREATE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_DELETE - 64)) | (1L << (K_DISCONNECT - 64)) | (1L << (K_DETACH - 64)) | (1L << (K_DROP - 64)) | (1L << (K_END - 64)) | (1L << (K_EXPLAIN - 64)) | (1L << (K_INSERT - 64)) | (1L << (K_PRAGMA - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (K_REINDEX - 130)) | (1L << (K_RELEASE - 130)) | (1L << (K_REPLACE - 130)) | (1L << (K_ROLLBACK - 130)) | (1L << (K_SAVEPOINT - 130)) | (1L << (K_SELECT - 130)) | (1L << (K_UPDATE - 130)) | (1L << (K_VACUUM - 130)) | (1L << (K_VALUES - 130)) | (1L << (K_WITH - 130)) | (1L << (UNEXPECTED_CHAR - 130)))) != 0)) {
				{
				State = 179;
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 176; error();
					}
					break;

				case 2:
					{
					State = 177; cmd_stmt_list();
					}
					break;

				case 3:
					{
					State = 178; sql_stmt_list();
					}
					break;
				}
				}
				State = 183;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 184; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(SQLiteParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     throw new System.Exception("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_stmt_listContext : ParserRuleContext {
		public Cmd_stmtContext cmd_stmt(int i) {
			return GetRuleContext<Cmd_stmtContext>(i);
		}
		public IReadOnlyList<Cmd_stmtContext> cmd_stmt() {
			return GetRuleContexts<Cmd_stmtContext>();
		}
		public Cmd_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCmd_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCmd_stmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_stmt_listContext cmd_stmt_list() {
		Cmd_stmt_listContext _localctx = new Cmd_stmt_listContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_cmd_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SCOL) {
				{
				{
				State = 189; Match(SCOL);
				}
				}
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 195; cmd_stmt();
			State = 204;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 197;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 196; Match(SCOL);
						}
						}
						State = 199;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==SCOL );
					State = 201; cmd_stmt();
					}
					} 
				}
				State = 206;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 210;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 207; Match(SCOL);
					}
					} 
				}
				State = 212;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_stmtContext : ParserRuleContext {
		public Disconnect_stmtContext disconnect_stmt() {
			return GetRuleContext<Disconnect_stmtContext>(0);
		}
		public Connect_stmtContext connect_stmt() {
			return GetRuleContext<Connect_stmtContext>(0);
		}
		public Cmd_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCmd_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCmd_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_stmtContext cmd_stmt() {
		Cmd_stmtContext _localctx = new Cmd_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_cmd_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			switch (_input.La(1)) {
			case K_CONNECT:
				{
				State = 213; connect_stmt();
				}
				break;
			case K_DISCONNECT:
				{
				State = 214; disconnect_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connect_stmtContext : ParserRuleContext {
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_CONNECT() { return GetToken(SQLiteParser.K_CONNECT, 0); }
		public ITerminalNode K_SYSOPER() { return GetToken(SQLiteParser.K_SYSOPER, 0); }
		public ITerminalNode K_SYSDBA() { return GetToken(SQLiteParser.K_SYSDBA, 0); }
		public Connect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connect_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterConnect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitConnect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Connect_stmtContext connect_stmt() {
		Connect_stmtContext _localctx = new Connect_stmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_connect_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(K_CONNECT);
			State = 218; expr(0);
			State = 219; Match(DIV);
			State = 220; expr(0);
			State = 223;
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 221; Match(T__0);
				State = 222; expr(0);
				}
			}

			State = 229;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 225; Match(K_AS);
				State = 226; Match(K_SYSOPER);
				}
				break;

			case 2:
				{
				State = 227; Match(K_AS);
				State = 228; Match(K_SYSDBA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disconnect_stmtContext : ParserRuleContext {
		public ITerminalNode K_DISCONNECT() { return GetToken(SQLiteParser.K_DISCONNECT, 0); }
		public Disconnect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disconnect_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDisconnect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDisconnect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisconnect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disconnect_stmtContext disconnect_stmt() {
		Disconnect_stmtContext _localctx = new Disconnect_stmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_disconnect_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(K_DISCONNECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public IReadOnlyList<Sql_stmtContext> sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SCOL) {
				{
				{
				State = 233; Match(SCOL);
				}
				}
				State = 238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 239; sql_stmt();
			State = 248;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 241;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 240; Match(SCOL);
						}
						}
						State = 243;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==SCOL );
					State = 245; sql_stmt();
					}
					} 
				}
				State = 250;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 254;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 251; Match(SCOL);
					}
					} 
				}
				State = 256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLiteParser.K_EXPLAIN, 0); }
		public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		public ITerminalNode K_QUERY() { return GetToken(SQLiteParser.K_QUERY, 0); }
		public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		public Factored_select_stmtContext factored_select_stmt() {
			return GetRuleContext<Factored_select_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return GetRuleContext<Drop_index_stmtContext>(0);
		}
		public ITerminalNode K_PLAN() { return GetToken(SQLiteParser.K_PLAN, 0); }
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return GetRuleContext<Drop_trigger_stmtContext>(0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		public Drop_sequence_stmtContext drop_sequence_stmt() {
			return GetRuleContext<Drop_sequence_stmtContext>(0);
		}
		public Compound_select_stmtContext compound_select_stmt() {
			return GetRuleContext<Compound_select_stmtContext>(0);
		}
		public Create_sequence_stmtContext create_sequence_stmt() {
			return GetRuleContext<Create_sequence_stmtContext>(0);
		}
		public Simple_select_stmtContext simple_select_stmt() {
			return GetRuleContext<Simple_select_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_la = _input.La(1);
			if (_la==K_EXPLAIN) {
				{
				State = 257; Match(K_EXPLAIN);
				State = 260;
				_la = _input.La(1);
				if (_la==K_QUERY) {
					{
					State = 258; Match(K_QUERY);
					State = 259; Match(K_PLAN);
					}
				}

				}
			}

			State = 296;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 264; alter_table_stmt();
				}
				break;

			case 2:
				{
				State = 265; analyze_stmt();
				}
				break;

			case 3:
				{
				State = 266; attach_stmt();
				}
				break;

			case 4:
				{
				State = 267; begin_stmt();
				}
				break;

			case 5:
				{
				State = 268; commit_stmt();
				}
				break;

			case 6:
				{
				State = 269; compound_select_stmt();
				}
				break;

			case 7:
				{
				State = 270; create_index_stmt();
				}
				break;

			case 8:
				{
				State = 271; create_table_stmt();
				}
				break;

			case 9:
				{
				State = 272; create_trigger_stmt();
				}
				break;

			case 10:
				{
				State = 273; create_view_stmt();
				}
				break;

			case 11:
				{
				State = 274; create_virtual_table_stmt();
				}
				break;

			case 12:
				{
				State = 275; delete_stmt();
				}
				break;

			case 13:
				{
				State = 276; delete_stmt_limited();
				}
				break;

			case 14:
				{
				State = 277; detach_stmt();
				}
				break;

			case 15:
				{
				State = 278; drop_index_stmt();
				}
				break;

			case 16:
				{
				State = 279; drop_table_stmt();
				}
				break;

			case 17:
				{
				State = 280; drop_trigger_stmt();
				}
				break;

			case 18:
				{
				State = 281; drop_view_stmt();
				}
				break;

			case 19:
				{
				State = 282; factored_select_stmt();
				}
				break;

			case 20:
				{
				State = 283; insert_stmt();
				}
				break;

			case 21:
				{
				State = 284; pragma_stmt();
				}
				break;

			case 22:
				{
				State = 285; reindex_stmt();
				}
				break;

			case 23:
				{
				State = 286; release_stmt();
				}
				break;

			case 24:
				{
				State = 287; rollback_stmt();
				}
				break;

			case 25:
				{
				State = 288; savepoint_stmt();
				}
				break;

			case 26:
				{
				State = 289; create_sequence_stmt();
				}
				break;

			case 27:
				{
				State = 290; drop_sequence_stmt();
				}
				break;

			case 28:
				{
				State = 291; simple_select_stmt();
				}
				break;

			case 29:
				{
				State = 292; select_stmt();
				}
				break;

			case 30:
				{
				State = 293; update_stmt();
				}
				break;

			case 31:
				{
				State = 294; update_stmt_limited();
				}
				break;

			case 32:
				{
				State = 295; vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_RENAME() { return GetToken(SQLiteParser.K_RENAME, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public ITerminalNode K_MODIFY() { return GetToken(SQLiteParser.K_MODIFY, 0); }
		public ITerminalNode K_ALTER() { return GetToken(SQLiteParser.K_ALTER, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_COLUMN() { return GetToken(SQLiteParser.K_COLUMN, 0); }
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public New_table_nameContext new_table_name() {
			return GetRuleContext<New_table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public IReadOnlyList<Column_defContext> column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public ITerminalNode K_ADD() { return GetToken(SQLiteParser.K_ADD, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_alter_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(K_ALTER);
			State = 299; Match(K_TABLE);
			State = 303;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 300; database_name();
				State = 301; Match(DOT);
				}
				break;
			}
			State = 305; table_name();
			State = 350;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 306; Match(K_RENAME);
				State = 307; Match(K_TO);
				State = 308; new_table_name();
				}
				break;

			case 2:
				{
				State = 309; Match(K_ADD);
				State = 311;
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 310; Match(K_COLUMN);
					}
					break;
				}
				State = 313; column_def();
				}
				break;

			case 3:
				{
				State = 314; Match(K_ADD);
				State = 315; Match(OPEN_PAR);
				State = 316; column_def();
				State = 321;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 317; Match(COMMA);
					State = 318; column_def();
					}
					}
					State = 323;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 324; Match(CLOSE_PAR);
				}
				break;

			case 4:
				{
				State = 326; Match(K_MODIFY);
				State = 327; Match(OPEN_PAR);
				State = 328; column_def();
				State = 333;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 329; Match(COMMA);
					State = 330; column_def();
					}
					}
					State = 335;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 336; Match(CLOSE_PAR);
				}
				break;

			case 5:
				{
				State = 338; Match(K_DROP);
				State = 339; Match(OPEN_PAR);
				State = 340; column_def();
				State = 345;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 341; Match(COMMA);
					State = 342; column_def();
					}
					}
					State = 347;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 348; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequence_stmtContext : ParserRuleContext {
		public ITerminalNode K_NO(int i) {
			return GetToken(SQLiteParser.K_NO, i);
		}
		public IReadOnlyList<ITerminalNode> K_NO() { return GetTokens(SQLiteParser.K_NO); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_SEQUENCE() { return GetToken(SQLiteParser.K_SEQUENCE, 0); }
		public ITerminalNode K_START() { return GetToken(SQLiteParser.K_START, 0); }
		public ITerminalNode K_MINVALUE() { return GetToken(SQLiteParser.K_MINVALUE, 0); }
		public ITerminalNode K_CACHE() { return GetToken(SQLiteParser.K_CACHE, 0); }
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_INCREMENT() { return GetToken(SQLiteParser.K_INCREMENT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_CYCLE() { return GetToken(SQLiteParser.K_CYCLE, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_MAXVALUE() { return GetToken(SQLiteParser.K_MAXVALUE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Create_sequence_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_sequence_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_sequence_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequence_stmtContext create_sequence_stmt() {
		Create_sequence_stmtContext _localctx = new Create_sequence_stmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_create_sequence_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(K_CREATE);
			State = 353; Match(K_SEQUENCE);
			State = 357;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 354; database_name();
				State = 355; Match(DOT);
				}
				break;
			}
			State = 359; table_name();
			State = 363;
			_la = _input.La(1);
			if (_la==K_INCREMENT) {
				{
				State = 360; Match(K_INCREMENT);
				State = 361; Match(K_BY);
				State = 362; expr(0);
				}
			}

			State = 368;
			_la = _input.La(1);
			if (_la==K_START) {
				{
				State = 365; Match(K_START);
				State = 366; Match(K_WITH);
				State = 367; expr(0);
				}
			}

			State = 374;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 370; Match(K_NO);
				State = 371; Match(K_MAXVALUE);
				}
				break;

			case 2:
				{
				State = 372; Match(K_MAXVALUE);
				State = 373; expr(0);
				}
				break;
			}
			State = 380;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 376; Match(K_NO);
				State = 377; Match(K_MINVALUE);
				}
				break;

			case 2:
				{
				State = 378; Match(K_MINVALUE);
				State = 379; expr(0);
				}
				break;
			}
			State = 385;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 382; Match(K_NO);
				State = 383; Match(K_CYCLE);
				}
				break;

			case 2:
				{
				State = 384; Match(K_CYCLE);
				}
				break;
			}
			State = 391;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 387; Match(K_NO);
				State = 388; Match(K_CACHE);
				}
				break;

			case 2:
				{
				State = 389; Match(K_CACHE);
				State = 390; expr(0);
				}
				break;
			}
			State = 396;
			switch (_input.La(1)) {
			case K_NO:
				{
				State = 393; Match(K_NO);
				State = 394; Match(K_ORDER);
				}
				break;
			case K_ORDER:
				{
				State = 395; Match(K_ORDER);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CONNECT:
			case K_CREATE:
			case K_DELETE:
			case K_DISCONNECT:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequence_stmtContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_SEQUENCE() { return GetToken(SQLiteParser.K_SEQUENCE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_sequence_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_sequence_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_sequence_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequence_stmtContext drop_sequence_stmt() {
		Drop_sequence_stmtContext _localctx = new Drop_sequence_stmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_drop_sequence_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(K_DROP);
			State = 399; Match(K_SEQUENCE);
			State = 403;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 400; database_name();
				State = 401; Match(DOT);
				}
				break;
			}
			State = 405; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		public ITerminalNode K_ANALYZE() { return GetToken(SQLiteParser.K_ANALYZE, 0); }
		public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(K_ANALYZE);
			State = 414;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 408; database_name();
				}
				break;

			case 2:
				{
				State = 409; table_or_index_name();
				}
				break;

			case 3:
				{
				State = 410; database_name();
				State = 411; Match(DOT);
				State = 412; table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ATTACH() { return GetToken(SQLiteParser.K_ATTACH, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAttach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAttach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(K_ATTACH);
			State = 418;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 417; Match(K_DATABASE);
				}
				break;
			}
			State = 420; expr(0);
			State = 421; Match(K_AS);
			State = 422; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SQLiteParser.K_EXCLUSIVE, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(K_BEGIN);
			State = 426;
			_la = _input.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (K_DEFERRED - 63)) | (1L << (K_EXCLUSIVE - 63)) | (1L << (K_IMMEDIATE - 63)))) != 0)) {
				{
				State = 425;
				_la = _input.La(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (K_DEFERRED - 63)) | (1L << (K_EXCLUSIVE - 63)) | (1L << (K_IMMEDIATE - 63)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 432;
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 428; Match(K_TRANSACTION);
				State = 430;
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 429; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_COMMIT() { return GetToken(SQLiteParser.K_COMMIT, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			_la = _input.La(1);
			if ( !(_la==K_COMMIT || _la==K_END) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 439;
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 435; Match(K_TRANSACTION);
				State = 437;
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 436; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		public ITerminalNode K_EXCEPT(int i) {
			return GetToken(SQLiteParser.K_EXCEPT, i);
		}
		public ITerminalNode K_ALL(int i) {
			return GetToken(SQLiteParser.K_ALL, i);
		}
		public IReadOnlyList<Select_coreContext> select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_INTERSECT() { return GetTokens(SQLiteParser.K_INTERSECT); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public ITerminalNode K_UNION(int i) {
			return GetToken(SQLiteParser.K_UNION, i);
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_ALL() { return GetTokens(SQLiteParser.K_ALL); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_INTERSECT(int i) {
			return GetToken(SQLiteParser.K_INTERSECT, i);
		}
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public IReadOnlyList<ITerminalNode> K_EXCEPT() { return GetTokens(SQLiteParser.K_EXCEPT); }
		public IReadOnlyList<ITerminalNode> K_UNION() { return GetTokens(SQLiteParser.K_UNION); }
		public IReadOnlyList<Common_table_expressionContext> common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCompound_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCompound_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 441; Match(K_WITH);
				State = 443;
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 442; Match(K_RECURSIVE);
					}
					break;
				}
				State = 445; common_table_expression();
				State = 450;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 446; Match(COMMA);
					State = 447; common_table_expression();
					}
					}
					State = 452;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 455; select_core();
			State = 465;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 462;
				switch (_input.La(1)) {
				case K_UNION:
					{
					State = 456; Match(K_UNION);
					State = 458;
					_la = _input.La(1);
					if (_la==K_ALL) {
						{
						State = 457; Match(K_ALL);
						}
					}

					}
					break;
				case K_INTERSECT:
					{
					State = 460; Match(K_INTERSECT);
					}
					break;
				case K_EXCEPT:
					{
					State = 461; Match(K_EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 464; select_core();
				}
				}
				State = 467;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION );
			State = 479;
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 469; Match(K_ORDER);
				State = 470; Match(K_BY);
				State = 471; ordering_term();
				State = 476;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 472; Match(COMMA);
					State = 473; ordering_term();
					}
					}
					State = 478;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 487;
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 481; Match(K_LIMIT);
				State = 482; expr(0);
				State = 485;
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 483;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 484; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		public IReadOnlyList<Indexed_columnContext> indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(K_CREATE);
			State = 491;
			_la = _input.La(1);
			if (_la==K_UNIQUE) {
				{
				State = 490; Match(K_UNIQUE);
				}
			}

			State = 493; Match(K_INDEX);
			State = 497;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 494; Match(K_IF);
				State = 495; Match(K_NOT);
				State = 496; Match(K_EXISTS);
				}
				break;
			}
			State = 502;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 499; database_name();
				State = 500; Match(DOT);
				}
				break;
			}
			State = 504; index_name();
			State = 505; Match(K_ON);
			State = 506; table_name();
			State = 507; Match(OPEN_PAR);
			State = 508; indexed_column();
			State = 513;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 509; Match(COMMA);
				State = 510; indexed_column();
				}
				}
				State = 515;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 516; Match(CLOSE_PAR);
			State = 519;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 517; Match(K_WHERE);
				State = 518; expr(0);
				}
			}

			State = 523;
			_la = _input.La(1);
			if (_la==K_IN) {
				{
				State = 521; Match(K_IN);
				State = 522; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public IReadOnlyList<Table_constraintContext> table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public ITerminalNode K_WITHOUT() { return GetToken(SQLiteParser.K_WITHOUT, 0); }
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public IReadOnlyList<Column_defContext> column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(K_CREATE);
			State = 527;
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 526;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 529; Match(K_TABLE);
			State = 533;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 530; Match(K_IF);
				State = 531; Match(K_NOT);
				State = 532; Match(K_EXISTS);
				}
				break;
			}
			State = 538;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 535; database_name();
				State = 536; Match(DOT);
				}
				break;
			}
			State = 540; table_name();
			State = 564;
			switch (_input.La(1)) {
			case OPEN_PAR:
				{
				State = 541; Match(OPEN_PAR);
				State = 542; column_def();
				State = 547;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 543; Match(COMMA);
						State = 544; column_def();
						}
						} 
					}
					State = 549;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
				}
				State = 554;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 550; Match(COMMA);
					State = 551; table_constraint();
					}
					}
					State = 556;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 557; Match(CLOSE_PAR);
				State = 560;
				_la = _input.La(1);
				if (_la==K_WITHOUT) {
					{
					State = 558; Match(K_WITHOUT);
					State = 559; Match(IDENTIFIER);
					}
				}

				}
				break;
			case K_AS:
				{
				State = 562; Match(K_AS);
				State = 563; select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SQLiteParser.K_INSTEAD, 0); }
		public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public IReadOnlyList<Insert_stmtContext> insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		public ITerminalNode K_FOR() { return GetToken(SQLiteParser.K_FOR, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SQLiteParser.K_WHEN, 0); }
		public IReadOnlyList<Delete_stmtContext> delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		public Database_nameContext database_name(int i) {
			return GetRuleContext<Database_nameContext>(i);
		}
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(SQLiteParser.K_BEFORE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SQLiteParser.K_AFTER, 0); }
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public IReadOnlyList<ITerminalNode> K_OF() { return GetTokens(SQLiteParser.K_OF); }
		public ITerminalNode K_EACH() { return GetToken(SQLiteParser.K_EACH, 0); }
		public ITerminalNode K_ROW() { return GetToken(SQLiteParser.K_ROW, 0); }
		public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		public ITerminalNode K_OF(int i) {
			return GetToken(SQLiteParser.K_OF, i);
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<Update_stmtContext> update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public IReadOnlyList<Database_nameContext> database_name() {
			return GetRuleContexts<Database_nameContext>();
		}
		public IReadOnlyList<Select_stmtContext> select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(K_CREATE);
			State = 568;
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 567;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 570; Match(K_TRIGGER);
			State = 574;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 571; Match(K_IF);
				State = 572; Match(K_NOT);
				State = 573; Match(K_EXISTS);
				}
				break;
			}
			State = 579;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 576; database_name();
				State = 577; Match(DOT);
				}
				break;
			}
			State = 581; trigger_name();
			State = 586;
			switch (_input.La(1)) {
			case K_BEFORE:
				{
				State = 582; Match(K_BEFORE);
				}
				break;
			case K_AFTER:
				{
				State = 583; Match(K_AFTER);
				}
				break;
			case K_INSTEAD:
				{
				State = 584; Match(K_INSTEAD);
				State = 585; Match(K_OF);
				}
				break;
			case K_DELETE:
			case K_INSERT:
			case K_UPDATE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 602;
			switch (_input.La(1)) {
			case K_DELETE:
				{
				State = 588; Match(K_DELETE);
				}
				break;
			case K_INSERT:
				{
				State = 589; Match(K_INSERT);
				}
				break;
			case K_UPDATE:
				{
				State = 590; Match(K_UPDATE);
				State = 600;
				_la = _input.La(1);
				if (_la==K_OF) {
					{
					State = 591; Match(K_OF);
					State = 592; column_name();
					State = 597;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 593; Match(COMMA);
						State = 594; column_name();
						}
						}
						State = 599;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 604; Match(K_ON);
			State = 608;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 605; database_name();
				State = 606; Match(DOT);
				}
				break;
			}
			State = 610; table_name();
			State = 614;
			_la = _input.La(1);
			if (_la==K_FOR) {
				{
				State = 611; Match(K_FOR);
				State = 612; Match(K_EACH);
				State = 613; Match(K_ROW);
				}
			}

			State = 618;
			_la = _input.La(1);
			if (_la==K_WHEN) {
				{
				State = 616; Match(K_WHEN);
				State = 617; expr(0);
				}
			}

			State = 620; Match(K_BEGIN);
			State = 629;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 625;
				switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					State = 621; update_stmt();
					}
					break;

				case 2:
					{
					State = 622; insert_stmt();
					}
					break;

				case 3:
					{
					State = 623; delete_stmt();
					}
					break;

				case 4:
					{
					State = 624; select_stmt();
					}
					break;
				}
				State = 627; Match(SCOL);
				}
				}
				State = 631;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_DELETE || _la==K_INSERT || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (K_REPLACE - 133)) | (1L << (K_SELECT - 133)) | (1L << (K_UPDATE - 133)) | (1L << (K_VALUES - 133)) | (1L << (K_WITH - 133)))) != 0) );
			State = 633; Match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635; Match(K_CREATE);
			State = 637;
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 636;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 639; Match(K_VIEW);
			State = 643;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 640; Match(K_IF);
				State = 641; Match(K_NOT);
				State = 642; Match(K_EXISTS);
				}
				break;
			}
			State = 648;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 645; database_name();
				State = 646; Match(DOT);
				}
				break;
			}
			State = 650; view_name();
			State = 651; Match(K_AS);
			State = 652; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		public ITerminalNode K_VIRTUAL() { return GetToken(SQLiteParser.K_VIRTUAL, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public IReadOnlyList<Module_argumentContext> module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_virtual_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_virtual_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; Match(K_CREATE);
			State = 655; Match(K_VIRTUAL);
			State = 656; Match(K_TABLE);
			State = 660;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 657; Match(K_IF);
				State = 658; Match(K_NOT);
				State = 659; Match(K_EXISTS);
				}
				break;
			}
			State = 665;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 662; database_name();
				State = 663; Match(DOT);
				}
				break;
			}
			State = 667; table_name();
			State = 668; Match(K_USING);
			State = 669; module_name();
			State = 681;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 670; Match(OPEN_PAR);
				State = 671; module_argument();
				State = 676;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 672; Match(COMMA);
					State = 673; module_argument();
					}
					}
					State = 678;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 679; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 683; with_clause();
				}
			}

			State = 686; Match(K_DELETE);
			State = 687; Match(K_FROM);
			State = 688; qualified_table_name();
			State = 691;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 689; Match(K_WHERE);
				State = 690; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDelete_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDelete_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 693; with_clause();
				}
			}

			State = 696; Match(K_DELETE);
			State = 697; Match(K_FROM);
			State = 698; qualified_table_name();
			State = 701;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 699; Match(K_WHERE);
				State = 700; expr(0);
				}
			}

			State = 721;
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 713;
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 703; Match(K_ORDER);
					State = 704; Match(K_BY);
					State = 705; ordering_term();
					State = 710;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 706; Match(COMMA);
						State = 707; ordering_term();
						}
						}
						State = 712;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 715; Match(K_LIMIT);
				State = 716; expr(0);
				State = 719;
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 717;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 718; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public ITerminalNode K_DETACH() { return GetToken(SQLiteParser.K_DETACH, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDetach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDetach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(K_DETACH);
			State = 725;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 724; Match(K_DATABASE);
				}
				break;
			}
			State = 727; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_stmtContext drop_index_stmt() {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_drop_index_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(K_DROP);
			State = 730; Match(K_INDEX);
			State = 733;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 731; Match(K_IF);
				State = 732; Match(K_EXISTS);
				}
				break;
			}
			State = 738;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 735; database_name();
				State = 736; Match(DOT);
				}
				break;
			}
			State = 740; index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_CASCADE() { return GetToken(SQLiteParser.K_CASCADE, 0); }
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_PURGE() { return GetToken(SQLiteParser.K_PURGE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_CONSTRAINTS() { return GetToken(SQLiteParser.K_CONSTRAINTS, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742; Match(K_DROP);
			State = 743; Match(K_TABLE);
			State = 746;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 744; Match(K_IF);
				State = 745; Match(K_EXISTS);
				}
				break;
			}
			State = 751;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 748; database_name();
				State = 749; Match(DOT);
				}
				break;
			}
			State = 754;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 753; table_name();
				}
				break;
			}
			State = 761;
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 756; Match(K_CASCADE);
				State = 757; Match(K_CONSTRAINTS);
				}
				break;

			case 2:
				{
				State = 758; Match(K_CASCADE);
				State = 759; Match(K_CONSTRAINTS);
				State = 760; Match(K_PURGE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_trigger_stmtContext drop_trigger_stmt() {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_drop_trigger_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763; Match(K_DROP);
			State = 764; Match(K_TRIGGER);
			State = 767;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 765; Match(K_IF);
				State = 766; Match(K_EXISTS);
				}
				break;
			}
			State = 772;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 769; database_name();
				State = 770; Match(DOT);
				}
				break;
			}
			State = 774; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(K_DROP);
			State = 777; Match(K_VIEW);
			State = 780;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 778; Match(K_IF);
				State = 779; Match(K_EXISTS);
				}
				break;
			}
			State = 785;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 782; database_name();
				State = 783; Match(DOT);
				}
				break;
			}
			State = 787; view_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		public IReadOnlyList<Select_coreContext> select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public IReadOnlyList<Common_table_expressionContext> common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public IReadOnlyList<Compound_operatorContext> compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_factored_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 789; Match(K_WITH);
				State = 791;
				switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					State = 790; Match(K_RECURSIVE);
					}
					break;
				}
				State = 793; common_table_expression();
				State = 798;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 794; Match(COMMA);
					State = 795; common_table_expression();
					}
					}
					State = 800;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 803; select_core();
			State = 809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 804; compound_operator();
				State = 805; select_core();
				}
				}
				State = 811;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 822;
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 812; Match(K_ORDER);
				State = 813; Match(K_BY);
				State = 814; ordering_term();
				State = 819;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 815; Match(COMMA);
					State = 816; ordering_term();
					}
					}
					State = 821;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 830;
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 824; Match(K_LIMIT);
				State = 825; expr(0);
				State = 828;
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 826;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 827; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode K_INTO() { return GetToken(SQLiteParser.K_INTO, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 832; with_clause();
				}
			}

			State = 852;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 835; Match(K_INSERT);
				}
				break;

			case 2:
				{
				State = 836; Match(K_REPLACE);
				}
				break;

			case 3:
				{
				State = 837; Match(K_INSERT);
				State = 838; Match(K_OR);
				State = 839; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 840; Match(K_INSERT);
				State = 841; Match(K_OR);
				State = 842; Match(K_ROLLBACK);
				}
				break;

			case 5:
				{
				State = 843; Match(K_INSERT);
				State = 844; Match(K_OR);
				State = 845; Match(K_ABORT);
				}
				break;

			case 6:
				{
				State = 846; Match(K_INSERT);
				State = 847; Match(K_OR);
				State = 848; Match(K_FAIL);
				}
				break;

			case 7:
				{
				State = 849; Match(K_INSERT);
				State = 850; Match(K_OR);
				State = 851; Match(K_IGNORE);
				}
				break;
			}
			State = 854; Match(K_INTO);
			State = 858;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 855; database_name();
				State = 856; Match(DOT);
				}
				break;
			}
			State = 860; table_name();
			State = 872;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 861; Match(OPEN_PAR);
				State = 862; column_name();
				State = 867;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 863; Match(COMMA);
					State = 864; column_name();
					}
					}
					State = 869;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 870; Match(CLOSE_PAR);
				}
			}

			State = 905;
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				State = 874; Match(K_VALUES);
				State = 875; Match(OPEN_PAR);
				State = 876; expr(0);
				State = 881;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 877; Match(COMMA);
					State = 878; expr(0);
					}
					}
					State = 883;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 884; Match(CLOSE_PAR);
				State = 899;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 885; Match(COMMA);
					State = 886; Match(OPEN_PAR);
					State = 887; expr(0);
					State = 892;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 888; Match(COMMA);
						State = 889; expr(0);
						}
						}
						State = 894;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 895; Match(CLOSE_PAR);
					}
					}
					State = 901;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 902; select_stmt();
				}
				break;

			case 3:
				{
				State = 903; Match(K_DEFAULT);
				State = 904; Match(K_VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_PRAGMA() { return GetToken(SQLiteParser.K_PRAGMA, 0); }
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907; Match(K_PRAGMA);
			State = 911;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				State = 908; database_name();
				State = 909; Match(DOT);
				}
				break;
			}
			State = 913; pragma_name();
			State = 920;
			switch (_input.La(1)) {
			case ASSIGN:
				{
				State = 914; Match(ASSIGN);
				State = 915; pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 916; Match(OPEN_PAR);
				State = 917; pragma_value();
				State = 918; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CONNECT:
			case K_CREATE:
			case K_DELETE:
			case K_DISCONNECT:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_REINDEX() { return GetToken(SQLiteParser.K_REINDEX, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterReindex_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitReindex_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReindex_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922; Match(K_REINDEX);
			State = 933;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				State = 923; collation_name();
				}
				break;

			case 2:
				{
				State = 927;
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 924; database_name();
					State = 925; Match(DOT);
					}
					break;
				}
				State = 931;
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 929; table_name();
					}
					break;

				case 2:
					{
					State = 930; index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(SQLiteParser.K_RELEASE, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935; Match(K_RELEASE);
			State = 937;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 936; Match(K_SAVEPOINT);
				}
				break;
			}
			State = 939; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; Match(K_ROLLBACK);
			State = 946;
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 942; Match(K_TRANSACTION);
				State = 944;
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 943; transaction_name();
					}
					break;
				}
				}
			}

			State = 953;
			_la = _input.La(1);
			if (_la==K_TO) {
				{
				State = 948; Match(K_TO);
				State = 950;
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 949; Match(K_SAVEPOINT);
					}
					break;
				}
				State = 952; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955; Match(K_SAVEPOINT);
			State = 956; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public IReadOnlyList<Common_table_expressionContext> common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 958; Match(K_WITH);
				State = 960;
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 959; Match(K_RECURSIVE);
					}
					break;
				}
				State = 962; common_table_expression();
				State = 967;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 963; Match(COMMA);
					State = 964; common_table_expression();
					}
					}
					State = 969;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 972; select_core();
			State = 983;
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 973; Match(K_ORDER);
				State = 974; Match(K_BY);
				State = 975; ordering_term();
				State = 980;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 976; Match(COMMA);
					State = 977; ordering_term();
					}
					}
					State = 982;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 991;
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 985; Match(K_LIMIT);
				State = 986; expr(0);
				State = 989;
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 987;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 988; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_or_valuesContext select_or_values(int i) {
			return GetRuleContext<Select_or_valuesContext>(i);
		}
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public IReadOnlyList<Select_or_valuesContext> select_or_values() {
			return GetRuleContexts<Select_or_valuesContext>();
		}
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public IReadOnlyList<Common_table_expressionContext> common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public IReadOnlyList<Compound_operatorContext> compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 993; Match(K_WITH);
				State = 995;
				switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					State = 994; Match(K_RECURSIVE);
					}
					break;
				}
				State = 997; common_table_expression();
				State = 1002;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 998; Match(COMMA);
					State = 999; common_table_expression();
					}
					}
					State = 1004;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1007; select_or_values();
			State = 1013;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 1008; compound_operator();
				State = 1009; select_or_values();
				}
				}
				State = 1015;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1026;
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 1016; Match(K_ORDER);
				State = 1017; Match(K_BY);
				State = 1018; ordering_term();
				State = 1023;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1019; Match(COMMA);
					State = 1020; ordering_term();
					}
					}
					State = 1025;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1034;
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 1028; Match(K_LIMIT);
				State = 1029; expr(0);
				State = 1032;
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 1030;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1031; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_valuesContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IReadOnlyList<Result_columnContext> result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Select_or_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_or_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_or_values(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_valuesContext select_or_values() {
		Select_or_valuesContext _localctx = new Select_or_valuesContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_select_or_values);
		int _la;
		try {
			State = 1110;
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036; Match(K_SELECT);
				State = 1038;
				switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					State = 1037;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				State = 1040; result_column();
				State = 1045;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1041; Match(COMMA);
					State = 1042; result_column();
					}
					}
					State = 1047;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1060;
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 1048; Match(K_FROM);
					State = 1058;
					switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
					case 1:
						{
						State = 1049; table_or_subquery();
						State = 1054;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 1050; Match(COMMA);
							State = 1051; table_or_subquery();
							}
							}
							State = 1056;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 1057; join_clause();
						}
						break;
					}
					}
				}

				State = 1064;
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 1062; Match(K_WHERE);
					State = 1063; expr(0);
					}
				}

				State = 1080;
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 1066; Match(K_GROUP);
					State = 1067; Match(K_BY);
					State = 1068; expr(0);
					State = 1073;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1069; Match(COMMA);
						State = 1070; expr(0);
						}
						}
						State = 1075;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1078;
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 1076; Match(K_HAVING);
						State = 1077; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082; Match(K_VALUES);
				State = 1083; Match(OPEN_PAR);
				State = 1084; expr(0);
				State = 1089;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1085; Match(COMMA);
					State = 1086; expr(0);
					}
					}
					State = 1091;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1092; Match(CLOSE_PAR);
				State = 1107;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1093; Match(COMMA);
					State = 1094; Match(OPEN_PAR);
					State = 1095; expr(0);
					State = 1100;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1096; Match(COMMA);
						State = 1097; expr(0);
						}
						}
						State = 1102;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1103; Match(CLOSE_PAR);
					}
					}
					State = 1109;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 1112; with_clause();
				}
			}

			State = 1115; Match(K_UPDATE);
			State = 1126;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1116; Match(K_OR);
				State = 1117; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 1118; Match(K_OR);
				State = 1119; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 1120; Match(K_OR);
				State = 1121; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 1122; Match(K_OR);
				State = 1123; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 1124; Match(K_OR);
				State = 1125; Match(K_IGNORE);
				}
				break;
			}
			State = 1128; qualified_table_name();
			State = 1129; Match(K_SET);
			State = 1130; column_name();
			State = 1131; Match(ASSIGN);
			State = 1132; expr(0);
			State = 1140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1133; Match(COMMA);
				State = 1134; column_name();
				State = 1135; Match(ASSIGN);
				State = 1136; expr(0);
				}
				}
				State = 1142;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1145;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 1143; Match(K_WHERE);
				State = 1144; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 1147; with_clause();
				}
			}

			State = 1150; Match(K_UPDATE);
			State = 1161;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1151; Match(K_OR);
				State = 1152; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 1153; Match(K_OR);
				State = 1154; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 1155; Match(K_OR);
				State = 1156; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 1157; Match(K_OR);
				State = 1158; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 1159; Match(K_OR);
				State = 1160; Match(K_IGNORE);
				}
				break;
			}
			State = 1163; qualified_table_name();
			State = 1164; Match(K_SET);
			State = 1165; column_name();
			State = 1166; Match(ASSIGN);
			State = 1167; expr(0);
			State = 1175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1168; Match(COMMA);
				State = 1169; column_name();
				State = 1170; Match(ASSIGN);
				State = 1171; expr(0);
				}
				}
				State = 1177;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1180;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 1178; Match(K_WHERE);
				State = 1179; expr(0);
				}
			}

			State = 1200;
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 1192;
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 1182; Match(K_ORDER);
					State = 1183; Match(K_BY);
					State = 1184; ordering_term();
					State = 1189;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1185; Match(COMMA);
						State = 1186; ordering_term();
						}
						}
						State = 1191;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1194; Match(K_LIMIT);
				State = 1195; expr(0);
				State = 1198;
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 1196;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1197; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		public ITerminalNode K_VACUUM() { return GetToken(SQLiteParser.K_VACUUM, 0); }
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterVacuum_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitVacuum_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacuum_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_vacuum_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202; Match(K_VACUUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Column_constraintContext> column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204; column_name();
			State = 1206;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1205; type_name();
				}
				break;
			}
			State = 1211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (K_NOT - 112)) | (1L << (K_NULL - 112)) | (1L << (K_PRIMARY - 112)) | (1L << (K_REFERENCES - 112)) | (1L << (K_UNIQUE - 112)))) != 0)) {
				{
				{
				State = 1208; column_constraint();
				}
				}
				State = 1213;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public IReadOnlyList<Signed_numberContext> signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public IReadOnlyList<NameContext> name() {
			return GetRuleContexts<NameContext>();
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1214; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1217;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,168,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1229;
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1219; Match(OPEN_PAR);
				State = 1220; signed_number();
				State = 1221; Match(CLOSE_PAR);
				}
				break;

			case 2:
				{
				State = 1223; Match(OPEN_PAR);
				State = 1224; signed_number();
				State = 1225; Match(COMMA);
				State = 1226; signed_number();
				State = 1227; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SQLiteParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1231; Match(K_CONSTRAINT);
				State = 1232; name();
				}
			}

			State = 1268;
			switch (_input.La(1)) {
			case K_PRIMARY:
				{
				State = 1235; Match(K_PRIMARY);
				State = 1236; Match(K_KEY);
				State = 1238;
				_la = _input.La(1);
				if (_la==K_ASC || _la==K_DESC) {
					{
					State = 1237;
					_la = _input.La(1);
					if ( !(_la==K_ASC || _la==K_DESC) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 1240; conflict_clause();
				State = 1242;
				_la = _input.La(1);
				if (_la==K_AUTOINCREMENT) {
					{
					State = 1241; Match(K_AUTOINCREMENT);
					}
				}

				}
				break;
			case K_NOT:
			case K_NULL:
				{
				State = 1245;
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 1244; Match(K_NOT);
					}
				}

				State = 1247; Match(K_NULL);
				State = 1248; conflict_clause();
				}
				break;
			case K_UNIQUE:
				{
				State = 1249; Match(K_UNIQUE);
				State = 1250; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1251; Match(K_CHECK);
				State = 1252; Match(OPEN_PAR);
				State = 1253; expr(0);
				State = 1254; Match(CLOSE_PAR);
				}
				break;
			case K_DEFAULT:
				{
				State = 1256; Match(K_DEFAULT);
				State = 1263;
				switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					State = 1257; signed_number();
					}
					break;

				case 2:
					{
					State = 1258; literal_value();
					}
					break;

				case 3:
					{
					State = 1259; Match(OPEN_PAR);
					State = 1260; expr(0);
					State = 1261; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case K_COLLATE:
				{
				State = 1265; Match(K_COLLATE);
				State = 1266; collation_name();
				}
				break;
			case K_REFERENCES:
				{
				State = 1267; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SQLiteParser.K_CONFLICT, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1273;
			_la = _input.La(1);
			if (_la==K_ON) {
				{
				State = 1270; Match(K_ON);
				State = 1271; Match(K_CONFLICT);
				State = 1272;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (K_FAIL - 78)) | (1L << (K_IGNORE - 78)) | (1L << (K_REPLACE - 78)) | (1L << (K_ROLLBACK - 78)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(SQLiteParser.BIND_PARAMETER, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_CASE() { return GetToken(SQLiteParser.K_CASE, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SQLiteParser.K_ISNULL, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public IReadOnlyList<ITerminalNode> K_WHEN() { return GetTokens(SQLiteParser.K_WHEN); }
		public ITerminalNode K_BETWEEN() { return GetToken(SQLiteParser.K_BETWEEN, 0); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(SQLiteParser.K_THEN, i);
		}
		public ITerminalNode K_CAST() { return GetToken(SQLiteParser.K_CAST, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ITerminalNode K_WHEN(int i) {
			return GetToken(SQLiteParser.K_WHEN, i);
		}
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_ELSE() { return GetToken(SQLiteParser.K_ELSE, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SQLiteParser.K_ESCAPE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SQLiteParser.K_NOTNULL, 0); }
		public IReadOnlyList<ITerminalNode> K_THEN() { return GetTokens(SQLiteParser.K_THEN); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1351;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 1276; unary_operator();
				State = 1277; expr(21);
				}
				break;

			case 2:
				{
				State = 1279; literal_value();
				}
				break;

			case 3:
				{
				State = 1280; Match(BIND_PARAMETER);
				}
				break;

			case 4:
				{
				State = 1289;
				switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					State = 1284;
					switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
					case 1:
						{
						State = 1281; database_name();
						State = 1282; Match(DOT);
						}
						break;
					}
					State = 1286; table_name();
					State = 1287; Match(DOT);
					}
					break;
				}
				State = 1291; column_name();
				}
				break;

			case 5:
				{
				State = 1292; function_name();
				State = 1293; Match(OPEN_PAR);
				State = 1306;
				switch (_input.La(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case K_ABORT:
				case K_ACTION:
				case K_ADD:
				case K_AFTER:
				case K_ALL:
				case K_ALTER:
				case K_ANALYZE:
				case K_AND:
				case K_AS:
				case K_ASC:
				case K_ATTACH:
				case K_AUTOINCREMENT:
				case K_BEFORE:
				case K_BEGIN:
				case K_BETWEEN:
				case K_BY:
				case K_CASCADE:
				case K_CASE:
				case K_CACHE:
				case K_CAST:
				case K_CHECK:
				case K_COLLATE:
				case K_COLUMN:
				case K_COMMIT:
				case K_CONFLICT:
				case K_CONNECT:
				case K_CONSTRAINT:
				case K_CONSTRAINTS:
				case K_CREATE:
				case K_CROSS:
				case K_CURRENT_DATE:
				case K_CURRENT_TIME:
				case K_CURRENT_TIMESTAMP:
				case K_CYCLE:
				case K_DATABASE:
				case K_DEFAULT:
				case K_DEFERRABLE:
				case K_DEFERRED:
				case K_DELETE:
				case K_DESC:
				case K_DISCONNECT:
				case K_DETACH:
				case K_DISTINCT:
				case K_DROP:
				case K_EACH:
				case K_ELSE:
				case K_END:
				case K_ESCAPE:
				case K_EXCEPT:
				case K_EXCLUSIVE:
				case K_EXISTS:
				case K_EXPLAIN:
				case K_FAIL:
				case K_FOR:
				case K_FOREIGN:
				case K_FROM:
				case K_FULL:
				case K_GLOB:
				case K_GROUP:
				case K_HAVING:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IN:
				case K_INCREMENT:
				case K_INDEX:
				case K_INDEXED:
				case K_INITIALLY:
				case K_INNER:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERSECT:
				case K_INTO:
				case K_IS:
				case K_ISNULL:
				case K_JOIN:
				case K_KEY:
				case K_LEFT:
				case K_LIKE:
				case K_LIMIT:
				case K_MATCH:
				case K_MINVALUE:
				case K_MODIFY:
				case K_MAXVALUE:
				case K_NATURAL:
				case K_NO:
				case K_NOT:
				case K_NOTNULL:
				case K_NULL:
				case K_OF:
				case K_OFFSET:
				case K_ON:
				case K_OR:
				case K_ORDER:
				case K_OUTER:
				case K_PLAN:
				case K_PRAGMA:
				case K_PRIMARY:
				case K_PURGE:
				case K_QUERY:
				case K_RAISE:
				case K_RECURSIVE:
				case K_REFERENCES:
				case K_REGEXP:
				case K_REINDEX:
				case K_RELEASE:
				case K_RENAME:
				case K_REPLACE:
				case K_RESTRICT:
				case K_RIGHT:
				case K_ROLLBACK:
				case K_ROW:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_SET:
				case K_SEQUENCE:
				case K_START:
				case K_SYSDBA:
				case K_SYSOPER:
				case K_TABLE:
				case K_TEMP:
				case K_TEMPORARY:
				case K_THEN:
				case K_TO:
				case K_TRANSACTION:
				case K_TRIGGER:
				case K_UNION:
				case K_UNIQUE:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_VIEW:
				case K_VIRTUAL:
				case K_WHEN:
				case K_WHERE:
				case K_WITH:
				case K_WITHOUT:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					State = 1295;
					switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						State = 1294; Match(K_DISTINCT);
						}
						break;
					}
					State = 1297; expr(0);
					State = 1302;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1298; Match(COMMA);
						State = 1299; expr(0);
						}
						}
						State = 1304;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case STAR:
					{
					State = 1305; Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1308; Match(CLOSE_PAR);
				}
				break;

			case 6:
				{
				State = 1310; Match(OPEN_PAR);
				State = 1311; expr(0);
				State = 1312; Match(CLOSE_PAR);
				}
				break;

			case 7:
				{
				State = 1314; Match(K_CAST);
				State = 1315; Match(OPEN_PAR);
				State = 1316; expr(0);
				State = 1317; Match(K_AS);
				State = 1318; type_name();
				State = 1319; Match(CLOSE_PAR);
				}
				break;

			case 8:
				{
				State = 1325;
				_la = _input.La(1);
				if (_la==K_EXISTS || _la==K_NOT) {
					{
					State = 1322;
					_la = _input.La(1);
					if (_la==K_NOT) {
						{
						State = 1321; Match(K_NOT);
						}
					}

					State = 1324; Match(K_EXISTS);
					}
				}

				State = 1327; Match(OPEN_PAR);
				State = 1328; select_stmt();
				State = 1329; Match(CLOSE_PAR);
				}
				break;

			case 9:
				{
				State = 1331; Match(K_CASE);
				State = 1333;
				switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					State = 1332; expr(0);
					}
					break;
				}
				State = 1340;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1335; Match(K_WHEN);
					State = 1336; expr(0);
					State = 1337; Match(K_THEN);
					State = 1338; expr(0);
					}
					}
					State = 1342;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==K_WHEN );
				State = 1346;
				_la = _input.La(1);
				if (_la==K_ELSE) {
					{
					State = 1344; Match(K_ELSE);
					State = 1345; expr(0);
					}
				}

				State = 1348; Match(K_END);
				}
				break;

			case 10:
				{
				State = 1350; raise_function();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1453;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,200,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1451;
					switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1353;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 1354; Match(PIPE2);
						State = 1355; expr(21);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1356;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 1357;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1358; expr(20);
						}
						break;

					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1359;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 1360;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1361; expr(19);
						}
						break;

					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1362;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 1363;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1364; expr(18);
						}
						break;

					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1365;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 1366;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1367; expr(17);
						}
						break;

					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1368;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 1381;
						switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
						case 1:
							{
							State = 1369; Match(ASSIGN);
							}
							break;

						case 2:
							{
							State = 1370; Match(EQ);
							}
							break;

						case 3:
							{
							State = 1371; Match(NOT_EQ1);
							}
							break;

						case 4:
							{
							State = 1372; Match(NOT_EQ2);
							}
							break;

						case 5:
							{
							State = 1373; Match(K_IS);
							}
							break;

						case 6:
							{
							State = 1374; Match(K_IS);
							State = 1375; Match(K_NOT);
							}
							break;

						case 7:
							{
							State = 1376; Match(K_IN);
							}
							break;

						case 8:
							{
							State = 1377; Match(K_LIKE);
							}
							break;

						case 9:
							{
							State = 1378; Match(K_GLOB);
							}
							break;

						case 10:
							{
							State = 1379; Match(K_MATCH);
							}
							break;

						case 11:
							{
							State = 1380; Match(K_REGEXP);
							}
							break;
						}
						State = 1383; expr(16);
						}
						break;

					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1384;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1385; Match(K_AND);
						State = 1386; expr(15);
						}
						break;

					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1387;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 1388; Match(K_OR);
						State = 1389; expr(14);
						}
						break;

					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1390;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 1391; Match(K_IS);
						State = 1393;
						switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
						case 1:
							{
							State = 1392; Match(K_NOT);
							}
							break;
						}
						State = 1395; expr(7);
						}
						break;

					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1396;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1398;
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1397; Match(K_NOT);
							}
						}

						State = 1400; Match(K_BETWEEN);
						State = 1401; expr(0);
						State = 1402; Match(K_AND);
						State = 1403; expr(6);
						}
						break;

					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1405;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1406; Match(K_COLLATE);
						State = 1407; collation_name();
						}
						break;

					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1408;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1410;
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1409; Match(K_NOT);
							}
						}

						State = 1412;
						_la = _input.La(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (K_GLOB - 83)) | (1L << (K_LIKE - 83)) | (1L << (K_MATCH - 83)) | (1L << (K_REGEXP - 83)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1413; expr(0);
						State = 1416;
						switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
						case 1:
							{
							State = 1414; Match(K_ESCAPE);
							State = 1415; expr(0);
							}
							break;
						}
						}
						break;

					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1418;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1423;
						switch (_input.La(1)) {
						case K_ISNULL:
							{
							State = 1419; Match(K_ISNULL);
							}
							break;
						case K_NOTNULL:
							{
							State = 1420; Match(K_NOTNULL);
							}
							break;
						case K_NOT:
							{
							State = 1421; Match(K_NOT);
							State = 1422; Match(K_NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1425;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1427;
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1426; Match(K_NOT);
							}
						}

						State = 1429; Match(K_IN);
						State = 1449;
						switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
						case 1:
							{
							State = 1430; Match(OPEN_PAR);
							State = 1440;
							switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
							case 1:
								{
								State = 1431; select_stmt();
								}
								break;

							case 2:
								{
								State = 1432; expr(0);
								State = 1437;
								_errHandler.Sync(this);
								_la = _input.La(1);
								while (_la==COMMA) {
									{
									{
									State = 1433; Match(COMMA);
									State = 1434; expr(0);
									}
									}
									State = 1439;
									_errHandler.Sync(this);
									_la = _input.La(1);
								}
								}
								break;
							}
							State = 1442; Match(CLOSE_PAR);
							}
							break;

						case 2:
							{
							State = 1446;
							switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
							case 1:
								{
								State = 1443; database_name();
								State = 1444; Match(DOT);
								}
								break;
							}
							State = 1448; table_name();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1455;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,200,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_RESTRICT() { return GetTokens(SQLiteParser.K_RESTRICT); }
		public ITerminalNode K_NO(int i) {
			return GetToken(SQLiteParser.K_NO, i);
		}
		public IReadOnlyList<ITerminalNode> K_CASCADE() { return GetTokens(SQLiteParser.K_CASCADE); }
		public IReadOnlyList<ITerminalNode> K_DEFAULT() { return GetTokens(SQLiteParser.K_DEFAULT); }
		public ITerminalNode K_RESTRICT(int i) {
			return GetToken(SQLiteParser.K_RESTRICT, i);
		}
		public ITerminalNode K_ACTION(int i) {
			return GetToken(SQLiteParser.K_ACTION, i);
		}
		public IReadOnlyList<ITerminalNode> K_DELETE() { return GetTokens(SQLiteParser.K_DELETE); }
		public ITerminalNode K_DEFAULT(int i) {
			return GetToken(SQLiteParser.K_DEFAULT, i);
		}
		public ITerminalNode K_SET(int i) {
			return GetToken(SQLiteParser.K_SET, i);
		}
		public ITerminalNode K_ON(int i) {
			return GetToken(SQLiteParser.K_ON, i);
		}
		public IReadOnlyList<ITerminalNode> K_MATCH() { return GetTokens(SQLiteParser.K_MATCH); }
		public ITerminalNode K_INITIALLY() { return GetToken(SQLiteParser.K_INITIALLY, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(SQLiteParser.K_DEFERRABLE, 0); }
		public IReadOnlyList<ITerminalNode> K_SET() { return GetTokens(SQLiteParser.K_SET); }
		public IReadOnlyList<ITerminalNode> K_NULL() { return GetTokens(SQLiteParser.K_NULL); }
		public IReadOnlyList<NameContext> name() {
			return GetRuleContexts<NameContext>();
		}
		public ITerminalNode K_NULL(int i) {
			return GetToken(SQLiteParser.K_NULL, i);
		}
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public ITerminalNode K_DELETE(int i) {
			return GetToken(SQLiteParser.K_DELETE, i);
		}
		public IReadOnlyList<ITerminalNode> K_NO() { return GetTokens(SQLiteParser.K_NO); }
		public ITerminalNode K_UPDATE(int i) {
			return GetToken(SQLiteParser.K_UPDATE, i);
		}
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_ON() { return GetTokens(SQLiteParser.K_ON); }
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_REFERENCES() { return GetToken(SQLiteParser.K_REFERENCES, 0); }
		public ITerminalNode K_CASCADE(int i) {
			return GetToken(SQLiteParser.K_CASCADE, i);
		}
		public IReadOnlyList<ITerminalNode> K_UPDATE() { return GetTokens(SQLiteParser.K_UPDATE); }
		public ITerminalNode K_MATCH(int i) {
			return GetToken(SQLiteParser.K_MATCH, i);
		}
		public IReadOnlyList<ITerminalNode> K_ACTION() { return GetTokens(SQLiteParser.K_ACTION); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456; Match(K_REFERENCES);
			State = 1457; foreign_table();
			State = 1469;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1458; Match(OPEN_PAR);
				State = 1459; column_name();
				State = 1464;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1460; Match(COMMA);
					State = 1461; column_name();
					}
					}
					State = 1466;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1467; Match(CLOSE_PAR);
				}
			}

			State = 1489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_MATCH || _la==K_ON) {
				{
				{
				State = 1485;
				switch (_input.La(1)) {
				case K_ON:
					{
					State = 1471; Match(K_ON);
					State = 1472;
					_la = _input.La(1);
					if ( !(_la==K_DELETE || _la==K_UPDATE) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1481;
					switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
					case 1:
						{
						State = 1473; Match(K_SET);
						State = 1474; Match(K_NULL);
						}
						break;

					case 2:
						{
						State = 1475; Match(K_SET);
						State = 1476; Match(K_DEFAULT);
						}
						break;

					case 3:
						{
						State = 1477; Match(K_CASCADE);
						}
						break;

					case 4:
						{
						State = 1478; Match(K_RESTRICT);
						}
						break;

					case 5:
						{
						State = 1479; Match(K_NO);
						State = 1480; Match(K_ACTION);
						}
						break;
					}
					}
					break;
				case K_MATCH:
					{
					State = 1483; Match(K_MATCH);
					State = 1484; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1491;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1502;
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 1493;
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 1492; Match(K_NOT);
					}
				}

				State = 1495; Match(K_DEFERRABLE);
				State = 1500;
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 1496; Match(K_INITIALLY);
					State = 1497; Match(K_DEFERRED);
					}
					break;

				case 2:
					{
					State = 1498; Match(K_INITIALLY);
					State = 1499; Match(K_IMMEDIATE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_RAISE() { return GetToken(SQLiteParser.K_RAISE, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504; Match(K_RAISE);
			State = 1505; Match(OPEN_PAR);
			State = 1510;
			switch (_input.La(1)) {
			case K_IGNORE:
				{
				State = 1506; Match(K_IGNORE);
				}
				break;
			case K_ABORT:
			case K_FAIL:
			case K_ROLLBACK:
				{
				State = 1507;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || _la==K_FAIL || _la==K_ROLLBACK) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1508; Match(COMMA);
				State = 1509; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1512; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; column_name();
			State = 1517;
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 1515; Match(K_COLLATE);
				State = 1516; collation_name();
				}
			}

			State = 1520;
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1519;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public IReadOnlyList<Indexed_columnContext> indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public ITerminalNode K_FOREIGN() { return GetToken(SQLiteParser.K_FOREIGN, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1524;
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1522; Match(K_CONSTRAINT);
				State = 1523; name();
				}
			}

			State = 1562;
			switch (_input.La(1)) {
			case K_PRIMARY:
			case K_UNIQUE:
				{
				State = 1529;
				switch (_input.La(1)) {
				case K_PRIMARY:
					{
					State = 1526; Match(K_PRIMARY);
					State = 1527; Match(K_KEY);
					}
					break;
				case K_UNIQUE:
					{
					State = 1528; Match(K_UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1531; Match(OPEN_PAR);
				State = 1532; indexed_column();
				State = 1537;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1533; Match(COMMA);
					State = 1534; indexed_column();
					}
					}
					State = 1539;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1540; Match(CLOSE_PAR);
				State = 1541; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1543; Match(K_CHECK);
				State = 1544; Match(OPEN_PAR);
				State = 1545; expr(0);
				State = 1546; Match(CLOSE_PAR);
				}
				break;
			case K_FOREIGN:
				{
				State = 1548; Match(K_FOREIGN);
				State = 1549; Match(K_KEY);
				State = 1550; Match(OPEN_PAR);
				State = 1551; column_name();
				State = 1556;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1552; Match(COMMA);
					State = 1553; column_name();
					}
					}
					State = 1558;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1559; Match(CLOSE_PAR);
				State = 1560; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public IReadOnlyList<ITerminalNode> K_AS() { return GetTokens(SQLiteParser.K_AS); }
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_AS(int i) {
			return GetToken(SQLiteParser.K_AS, i);
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public IReadOnlyList<Cte_table_nameContext> cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public IReadOnlyList<Select_stmtContext> select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; Match(K_WITH);
			State = 1566;
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 1565; Match(K_RECURSIVE);
				}
				break;
			}
			State = 1568; cte_table_name();
			State = 1569; Match(K_AS);
			State = 1570; Match(OPEN_PAR);
			State = 1571; select_stmt();
			State = 1572; Match(CLOSE_PAR);
			State = 1582;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1573; Match(COMMA);
				State = 1574; cte_table_name();
				State = 1575; Match(K_AS);
				State = 1576; Match(OPEN_PAR);
				State = 1577; select_stmt();
				State = 1578; Match(CLOSE_PAR);
				}
				}
				State = 1584;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_qualified_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 1585; database_name();
				State = 1586; Match(DOT);
				}
				break;
			}
			State = 1590; table_name();
			State = 1600;
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1591; Match(K_INDEXED);
				State = 1592; Match(K_BY);
				State = 1593; index_name();
				}
				break;

			case 2:
				{
				State = 1595;
				switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					State = 1594; Match(K_AS);
					}
					break;
				}
				State = 1597; table_alias();
				}
				break;

			case 3:
				{
				State = 1598; Match(K_NOT);
				State = 1599; Match(K_INDEXED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; expr(0);
			State = 1605;
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 1603; Match(K_COLLATE);
				State = 1604; collation_name();
				}
			}

			State = 1608;
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1607;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_pragma_value);
		try {
			State = 1613;
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1610; signed_number();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1611; name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1612; Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615; table_name();
			State = 1627;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1616; Match(OPEN_PAR);
				State = 1617; column_name();
				State = 1622;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1618; Match(COMMA);
					State = 1619; column_name();
					}
					}
					State = 1624;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1625; Match(CLOSE_PAR);
				}
			}

			State = 1629; Match(K_AS);
			State = 1630; Match(OPEN_PAR);
			State = 1631; select_stmt();
			State = 1632; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_result_column);
		int _la;
		try {
			State = 1646;
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1634; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635; table_name();
				State = 1636; Match(DOT);
				State = 1637; Match(STAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1639; expr(0);
				State = 1644;
				_la = _input.La(1);
				if (_la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1641;
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1640; Match(K_AS);
						}
					}

					State = 1643; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_table_or_subquery);
		int _la;
		try {
			State = 1695;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1651;
				switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					State = 1648; database_name();
					State = 1649; Match(DOT);
					}
					break;
				}
				State = 1653; table_name();
				State = 1658;
				switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					State = 1655;
					switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
					case 1:
						{
						State = 1654; Match(K_AS);
						}
						break;
					}
					State = 1657; table_alias();
					}
					break;
				}
				State = 1665;
				switch (_input.La(1)) {
				case K_INDEXED:
					{
					State = 1660; Match(K_INDEXED);
					State = 1661; Match(K_BY);
					State = 1662; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1663; Match(K_NOT);
					State = 1664; Match(K_INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case K_ALTER:
				case K_ANALYZE:
				case K_ATTACH:
				case K_BEGIN:
				case K_COMMIT:
				case K_CONNECT:
				case K_CREATE:
				case K_CROSS:
				case K_DELETE:
				case K_DISCONNECT:
				case K_DETACH:
				case K_DROP:
				case K_END:
				case K_EXCEPT:
				case K_EXPLAIN:
				case K_GROUP:
				case K_INNER:
				case K_INSERT:
				case K_INTERSECT:
				case K_JOIN:
				case K_LEFT:
				case K_LIMIT:
				case K_NATURAL:
				case K_ON:
				case K_ORDER:
				case K_PRAGMA:
				case K_REINDEX:
				case K_RELEASE:
				case K_REPLACE:
				case K_ROLLBACK:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_UNION:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_WHERE:
				case K_WITH:
				case UNEXPECTED_CHAR:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667; Match(OPEN_PAR);
				State = 1677;
				switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					State = 1668; table_or_subquery();
					State = 1673;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1669; Match(COMMA);
						State = 1670; table_or_subquery();
						}
						}
						State = 1675;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 1676; join_clause();
					}
					break;
				}
				State = 1679; Match(CLOSE_PAR);
				State = 1684;
				switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					State = 1681;
					switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
					case 1:
						{
						State = 1680; Match(K_AS);
						}
						break;
					}
					State = 1683; table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1686; Match(OPEN_PAR);
				State = 1687; select_stmt();
				State = 1688; Match(CLOSE_PAR);
				State = 1693;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 1690;
					switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
					case 1:
						{
						State = 1689; Match(K_AS);
						}
						break;
					}
					State = 1692; table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public IReadOnlyList<Join_operatorContext> join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public IReadOnlyList<Join_constraintContext> join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697; table_or_subquery();
			State = 1704;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA || _la==K_CROSS || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (K_INNER - 94)) | (1L << (K_JOIN - 94)) | (1L << (K_LEFT - 94)) | (1L << (K_NATURAL - 94)))) != 0)) {
				{
				{
				State = 1698; join_operator();
				State = 1699; table_or_subquery();
				State = 1700; join_constraint();
				}
				}
				State = 1706;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_CROSS() { return GetToken(SQLiteParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SQLiteParser.K_OUTER, 0); }
		public ITerminalNode K_INNER() { return GetToken(SQLiteParser.K_INNER, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SQLiteParser.K_NATURAL, 0); }
		public ITerminalNode K_JOIN() { return GetToken(SQLiteParser.K_JOIN, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SQLiteParser.K_LEFT, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_join_operator);
		int _la;
		try {
			State = 1720;
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1707; Match(COMMA);
				}
				break;
			case K_CROSS:
			case K_INNER:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1709;
				_la = _input.La(1);
				if (_la==K_NATURAL) {
					{
					State = 1708; Match(K_NATURAL);
					}
				}

				State = 1717;
				switch (_input.La(1)) {
				case K_LEFT:
					{
					State = 1711; Match(K_LEFT);
					State = 1713;
					_la = _input.La(1);
					if (_la==K_OUTER) {
						{
						State = 1712; Match(K_OUTER);
						}
					}

					}
					break;
				case K_INNER:
					{
					State = 1715; Match(K_INNER);
					}
					break;
				case K_CROSS:
					{
					State = 1716; Match(K_CROSS);
					}
					break;
				case K_JOIN:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1719; Match(K_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_join_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			switch (_input.La(1)) {
			case K_ON:
				{
				State = 1722; Match(K_ON);
				State = 1723; expr(0);
				}
				break;
			case K_USING:
				{
				State = 1724; Match(K_USING);
				State = 1725; Match(OPEN_PAR);
				State = 1726; column_name();
				State = 1731;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1727; Match(COMMA);
					State = 1728; column_name();
					}
					}
					State = 1733;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1734; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case CLOSE_PAR:
			case COMMA:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CONNECT:
			case K_CREATE:
			case K_CROSS:
			case K_DELETE:
			case K_DISCONNECT:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXCEPT:
			case K_EXPLAIN:
			case K_GROUP:
			case K_INNER:
			case K_INSERT:
			case K_INTERSECT:
			case K_JOIN:
			case K_LEFT:
			case K_LIMIT:
			case K_NATURAL:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UNION:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IReadOnlyList<Result_columnContext> result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_select_core);
		int _la;
		try {
			State = 1812;
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1738; Match(K_SELECT);
				State = 1740;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1739;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				State = 1742; result_column();
				State = 1747;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1743; Match(COMMA);
					State = 1744; result_column();
					}
					}
					State = 1749;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1762;
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 1750; Match(K_FROM);
					State = 1760;
					switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
					case 1:
						{
						State = 1751; table_or_subquery();
						State = 1756;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 1752; Match(COMMA);
							State = 1753; table_or_subquery();
							}
							}
							State = 1758;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 1759; join_clause();
						}
						break;
					}
					}
				}

				State = 1766;
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 1764; Match(K_WHERE);
					State = 1765; expr(0);
					}
				}

				State = 1782;
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 1768; Match(K_GROUP);
					State = 1769; Match(K_BY);
					State = 1770; expr(0);
					State = 1775;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1771; Match(COMMA);
						State = 1772; expr(0);
						}
						}
						State = 1777;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1780;
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 1778; Match(K_HAVING);
						State = 1779; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1784; Match(K_VALUES);
				State = 1785; Match(OPEN_PAR);
				State = 1786; expr(0);
				State = 1791;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1787; Match(COMMA);
					State = 1788; expr(0);
					}
					}
					State = 1793;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1794; Match(CLOSE_PAR);
				State = 1809;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1795; Match(COMMA);
					State = 1796; Match(OPEN_PAR);
					State = 1797; expr(0);
					State = 1802;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1798; Match(COMMA);
						State = 1799; expr(0);
						}
						}
						State = 1804;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1805; Match(CLOSE_PAR);
					}
					}
					State = 1811;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SQLiteParser.K_INTERSECT, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SQLiteParser.K_EXCEPT, 0); }
		public ITerminalNode K_UNION() { return GetToken(SQLiteParser.K_UNION, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_compound_operator);
		try {
			State = 1819;
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1814; Match(K_UNION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1815; Match(K_UNION);
				State = 1816; Match(K_ALL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1817; Match(K_INTERSECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1818; Match(K_EXCEPT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821; table_name();
			State = 1833;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1822; Match(OPEN_PAR);
				State = 1823; column_name();
				State = 1828;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1824; Match(COMMA);
					State = 1825; column_name();
					}
					}
					State = 1830;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1831; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1835;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 1838; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SQLiteParser.K_CURRENT_DATE, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SQLiteParser.K_CURRENT_TIME, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(SQLiteParser.BLOB_LITERAL, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (K_NULL - 114)) | (1L << (NUMERIC_LITERAL - 114)) | (1L << (STRING_LITERAL - 114)) | (1L << (BLOB_LITERAL - 114)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==K_NOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_module_argument);
		try {
			State = 1848;
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1846; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1847; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_DETACH() { return GetToken(SQLiteParser.K_DETACH, 0); }
		public ITerminalNode K_CASCADE() { return GetToken(SQLiteParser.K_CASCADE, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_VACUUM() { return GetToken(SQLiteParser.K_VACUUM, 0); }
		public ITerminalNode K_COLUMN() { return GetToken(SQLiteParser.K_COLUMN, 0); }
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SQLiteParser.K_VIRTUAL, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SQLiteParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_OF() { return GetToken(SQLiteParser.K_OF, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SQLiteParser.K_CROSS, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SQLiteParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public ITerminalNode K_CYCLE() { return GetToken(SQLiteParser.K_CYCLE, 0); }
		public ITerminalNode K_UNION() { return GetToken(SQLiteParser.K_UNION, 0); }
		public ITerminalNode K_RAISE() { return GetToken(SQLiteParser.K_RAISE, 0); }
		public ITerminalNode K_ADD() { return GetToken(SQLiteParser.K_ADD, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_SYSOPER() { return GetToken(SQLiteParser.K_SYSOPER, 0); }
		public ITerminalNode K_COMMIT() { return GetToken(SQLiteParser.K_COMMIT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SQLiteParser.K_CONFLICT, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public ITerminalNode K_SEQUENCE() { return GetToken(SQLiteParser.K_SEQUENCE, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SQLiteParser.K_QUERY, 0); }
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(SQLiteParser.K_RELEASE, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(SQLiteParser.K_DEFERRABLE, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public ITerminalNode K_FOR() { return GetToken(SQLiteParser.K_FOR, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SQLiteParser.K_EXCEPT, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(SQLiteParser.K_BEFORE, 0); }
		public ITerminalNode K_RENAME() { return GetToken(SQLiteParser.K_RENAME, 0); }
		public ITerminalNode K_INTO() { return GetToken(SQLiteParser.K_INTO, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SQLiteParser.K_INTERSECT, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_EACH() { return GetToken(SQLiteParser.K_EACH, 0); }
		public ITerminalNode K_MODIFY() { return GetToken(SQLiteParser.K_MODIFY, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SQLiteParser.K_LEFT, 0); }
		public ITerminalNode K_MINVALUE() { return GetToken(SQLiteParser.K_MINVALUE, 0); }
		public ITerminalNode K_FULL() { return GetToken(SQLiteParser.K_FULL, 0); }
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_REFERENCES() { return GetToken(SQLiteParser.K_REFERENCES, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public ITerminalNode K_CONNECT() { return GetToken(SQLiteParser.K_CONNECT, 0); }
		public ITerminalNode K_ACTION() { return GetToken(SQLiteParser.K_ACTION, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SQLiteParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_THEN() { return GetToken(SQLiteParser.K_THEN, 0); }
		public ITerminalNode K_RESTRICT() { return GetToken(SQLiteParser.K_RESTRICT, 0); }
		public ITerminalNode K_FOREIGN() { return GetToken(SQLiteParser.K_FOREIGN, 0); }
		public ITerminalNode K_PURGE() { return GetToken(SQLiteParser.K_PURGE, 0); }
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLiteParser.K_EXPLAIN, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SQLiteParser.K_INSTEAD, 0); }
		public ITerminalNode K_START() { return GetToken(SQLiteParser.K_START, 0); }
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SQLiteParser.K_ISNULL, 0); }
		public ITerminalNode K_INCREMENT() { return GetToken(SQLiteParser.K_INCREMENT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SQLiteParser.K_OUTER, 0); }
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public ITerminalNode K_SYSDBA() { return GetToken(SQLiteParser.K_SYSDBA, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public ITerminalNode K_CAST() { return GetToken(SQLiteParser.K_CAST, 0); }
		public ITerminalNode K_NO() { return GetToken(SQLiteParser.K_NO, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SQLiteParser.K_AFTER, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SQLiteParser.K_PLAN, 0); }
		public ITerminalNode K_ROW() { return GetToken(SQLiteParser.K_ROW, 0); }
		public ITerminalNode K_CACHE() { return GetToken(SQLiteParser.K_CACHE, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_ALTER() { return GetToken(SQLiteParser.K_ALTER, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SQLiteParser.K_NOTNULL, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_INNER() { return GetToken(SQLiteParser.K_INNER, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(SQLiteParser.K_RIGHT, 0); }
		public ITerminalNode K_DISCONNECT() { return GetToken(SQLiteParser.K_DISCONNECT, 0); }
		public ITerminalNode K_CASE() { return GetToken(SQLiteParser.K_CASE, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SQLiteParser.K_INITIALLY, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SQLiteParser.K_EXCLUSIVE, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_REINDEX() { return GetToken(SQLiteParser.K_REINDEX, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SQLiteParser.K_WHEN, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SQLiteParser.K_BETWEEN, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_ANALYZE() { return GetToken(SQLiteParser.K_ANALYZE, 0); }
		public ITerminalNode K_JOIN() { return GetToken(SQLiteParser.K_JOIN, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_PRAGMA() { return GetToken(SQLiteParser.K_PRAGMA, 0); }
		public ITerminalNode K_CONSTRAINTS() { return GetToken(SQLiteParser.K_CONSTRAINTS, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_ELSE() { return GetToken(SQLiteParser.K_ELSE, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public ITerminalNode K_ATTACH() { return GetToken(SQLiteParser.K_ATTACH, 0); }
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ITerminalNode K_MAXVALUE() { return GetToken(SQLiteParser.K_MAXVALUE, 0); }
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public ITerminalNode K_WITHOUT() { return GetToken(SQLiteParser.K_WITHOUT, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SQLiteParser.K_NATURAL, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SQLiteParser.K_ESCAPE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_ABORT) | (1L << K_ACTION) | (1L << K_ADD) | (1L << K_AFTER) | (1L << K_ALL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_AND) | (1L << K_AS) | (1L << K_ASC) | (1L << K_ATTACH) | (1L << K_AUTOINCREMENT) | (1L << K_BEFORE) | (1L << K_BEGIN) | (1L << K_BETWEEN) | (1L << K_BY) | (1L << K_CASCADE) | (1L << K_CASE) | (1L << K_CACHE) | (1L << K_CAST) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_COMMIT) | (1L << K_CONFLICT) | (1L << K_CONNECT) | (1L << K_CONSTRAINT) | (1L << K_CONSTRAINTS) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_CYCLE) | (1L << K_DATABASE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DEFERRED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_DELETE - 64)) | (1L << (K_DESC - 64)) | (1L << (K_DISCONNECT - 64)) | (1L << (K_DETACH - 64)) | (1L << (K_DISTINCT - 64)) | (1L << (K_DROP - 64)) | (1L << (K_EACH - 64)) | (1L << (K_ELSE - 64)) | (1L << (K_END - 64)) | (1L << (K_ESCAPE - 64)) | (1L << (K_EXCEPT - 64)) | (1L << (K_EXCLUSIVE - 64)) | (1L << (K_EXISTS - 64)) | (1L << (K_EXPLAIN - 64)) | (1L << (K_FAIL - 64)) | (1L << (K_FOR - 64)) | (1L << (K_FOREIGN - 64)) | (1L << (K_FROM - 64)) | (1L << (K_FULL - 64)) | (1L << (K_GLOB - 64)) | (1L << (K_GROUP - 64)) | (1L << (K_HAVING - 64)) | (1L << (K_IF - 64)) | (1L << (K_IGNORE - 64)) | (1L << (K_IMMEDIATE - 64)) | (1L << (K_IN - 64)) | (1L << (K_INCREMENT - 64)) | (1L << (K_INDEX - 64)) | (1L << (K_INDEXED - 64)) | (1L << (K_INITIALLY - 64)) | (1L << (K_INNER - 64)) | (1L << (K_INSERT - 64)) | (1L << (K_INSTEAD - 64)) | (1L << (K_INTERSECT - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KEY - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_MINVALUE - 64)) | (1L << (K_MODIFY - 64)) | (1L << (K_MAXVALUE - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NO - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_OF - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_ON - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_PLAN - 64)) | (1L << (K_PRAGMA - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_PURGE - 64)) | (1L << (K_QUERY - 64)) | (1L << (K_RAISE - 64)) | (1L << (K_RECURSIVE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_REFERENCES - 128)) | (1L << (K_REGEXP - 128)) | (1L << (K_REINDEX - 128)) | (1L << (K_RELEASE - 128)) | (1L << (K_RENAME - 128)) | (1L << (K_REPLACE - 128)) | (1L << (K_RESTRICT - 128)) | (1L << (K_RIGHT - 128)) | (1L << (K_ROLLBACK - 128)) | (1L << (K_ROW - 128)) | (1L << (K_SAVEPOINT - 128)) | (1L << (K_SELECT - 128)) | (1L << (K_SET - 128)) | (1L << (K_SEQUENCE - 128)) | (1L << (K_START - 128)) | (1L << (K_SYSDBA - 128)) | (1L << (K_SYSOPER - 128)) | (1L << (K_TABLE - 128)) | (1L << (K_TEMP - 128)) | (1L << (K_TEMPORARY - 128)) | (1L << (K_THEN - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRANSACTION - 128)) | (1L << (K_TRIGGER - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_UPDATE - 128)) | (1L << (K_USING - 128)) | (1L << (K_VACUUM - 128)) | (1L << (K_VALUES - 128)) | (1L << (K_VIEW - 128)) | (1L << (K_VIRTUAL - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (K_WITH - 128)) | (1L << (K_WITHOUT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterNew_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitNew_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1876; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1886; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_any_name);
		try {
			State = 1895;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1888; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CACHE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONNECT:
			case K_CONSTRAINT:
			case K_CONSTRAINTS:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_CYCLE:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DISCONNECT:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INCREMENT:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_MINVALUE:
			case K_MODIFY:
			case K_MAXVALUE:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRAGMA:
			case K_PRIMARY:
			case K_PURGE:
			case K_QUERY:
			case K_RAISE:
			case K_RECURSIVE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_SEQUENCE:
			case K_START:
			case K_SYSDBA:
			case K_SYSOPER:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VACUUM:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
			case K_WITH:
			case K_WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1889; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1890; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1891; Match(OPEN_PAR);
				State = 1892; any_name();
				State = 1893; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 45: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 20);

		case 1: return Precpred(_ctx, 19);

		case 2: return Precpred(_ctx, 18);

		case 3: return Precpred(_ctx, 17);

		case 4: return Precpred(_ctx, 16);

		case 5: return Precpred(_ctx, 15);

		case 6: return Precpred(_ctx, 14);

		case 7: return Precpred(_ctx, 13);

		case 8: return Precpred(_ctx, 6);

		case 9: return Precpred(_ctx, 5);

		case 10: return Precpred(_ctx, 9);

		case 11: return Precpred(_ctx, 8);

		case 12: return Precpred(_ctx, 7);

		case 13: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xAE\x76C\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x3\x2\x3\x2\x3\x2\a\x2\xB6\n\x2\f\x2\xE\x2\xB9\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x4\a\x4\xC1\n\x4\f\x4\xE\x4\xC4\v\x4\x3\x4\x3"+
		"\x4\x6\x4\xC8\n\x4\r\x4\xE\x4\xC9\x3\x4\a\x4\xCD\n\x4\f\x4\xE\x4\xD0\v"+
		"\x4\x3\x4\a\x4\xD3\n\x4\f\x4\xE\x4\xD6\v\x4\x3\x5\x3\x5\x5\x5\xDA\n\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xE2\n\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\xE8\n\x6\x3\a\x3\a\x3\b\a\b\xED\n\b\f\b\xE\b\xF0\v\b\x3\b"+
		"\x3\b\x6\b\xF4\n\b\r\b\xE\b\xF5\x3\b\a\b\xF9\n\b\f\b\xE\b\xFC\v\b\x3\b"+
		"\a\b\xFF\n\b\f\b\xE\b\x102\v\b\x3\t\x3\t\x3\t\x5\t\x107\n\t\x5\t\x109"+
		"\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x12B\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x132\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x13A\n\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\a\n\x142\n\n\f\n\xE\n\x145\v\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\a\n\x14E\n\n\f\n\xE\n\x151\v\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\a\n\x15A\n\n\f\n\xE\n\x15D\v\n\x3\n\x3\n\x5\n\x161\n\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x5\v\x168\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x16E\n\v\x3\v\x3\v"+
		"\x3\v\x5\v\x173\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x179\n\v\x3\v\x3\v\x3\v\x3"+
		"\v\x5\v\x17F\n\v\x3\v\x3\v\x3\v\x5\v\x184\n\v\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\x18A\n\v\x3\v\x3\v\x3\v\x5\v\x18F\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x196"+
		"\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1A1\n\r\x3\xE"+
		"\x3\xE\x5\xE\x1A5\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\x1AD"+
		"\n\xF\x3\xF\x3\xF\x5\xF\x1B1\n\xF\x5\xF\x1B3\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\x1B8\n\x10\x5\x10\x1BA\n\x10\x3\x11\x3\x11\x5\x11\x1BE\n\x11\x3"+
		"\x11\x3\x11\x3\x11\a\x11\x1C3\n\x11\f\x11\xE\x11\x1C6\v\x11\x5\x11\x1C8"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x1CD\n\x11\x3\x11\x3\x11\x5\x11\x1D1"+
		"\n\x11\x3\x11\x6\x11\x1D4\n\x11\r\x11\xE\x11\x1D5\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\a\x11\x1DD\n\x11\f\x11\xE\x11\x1E0\v\x11\x5\x11\x1E2\n"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x1E8\n\x11\x5\x11\x1EA\n\x11\x3"+
		"\x12\x3\x12\x5\x12\x1EE\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x1F4"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x1F9\n\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\a\x12\x202\n\x12\f\x12\xE\x12\x205\v\x12\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\x20A\n\x12\x3\x12\x3\x12\x5\x12\x20E\n\x12\x3"+
		"\x13\x3\x13\x5\x13\x212\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x218"+
		"\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x21D\n\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\a\x13\x224\n\x13\f\x13\xE\x13\x227\v\x13\x3\x13\x3\x13\a\x13"+
		"\x22B\n\x13\f\x13\xE\x13\x22E\v\x13\x3\x13\x3\x13\x3\x13\x5\x13\x233\n"+
		"\x13\x3\x13\x3\x13\x5\x13\x237\n\x13\x3\x14\x3\x14\x5\x14\x23B\n\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x241\n\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x246\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x24D\n\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x256\n\x14\f\x14\xE\x14"+
		"\x259\v\x14\x5\x14\x25B\n\x14\x5\x14\x25D\n\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x263\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x269\n\x14\x3"+
		"\x14\x3\x14\x5\x14\x26D\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x274\n\x14\x3\x14\x3\x14\x6\x14\x278\n\x14\r\x14\xE\x14\x279\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x5\x15\x280\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x286\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x28B\n\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x297\n\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x29C\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\a\x16\x2A5\n\x16\f\x16\xE\x16\x2A8\v\x16\x3\x16\x3\x16"+
		"\x5\x16\x2AC\n\x16\x3\x17\x5\x17\x2AF\n\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\x2B6\n\x17\x3\x18\x5\x18\x2B9\n\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x2C0\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a"+
		"\x18\x2C7\n\x18\f\x18\xE\x18\x2CA\v\x18\x5\x18\x2CC\n\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x2D2\n\x18\x5\x18\x2D4\n\x18\x3\x19\x3\x19\x5\x19"+
		"\x2D8\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2E0\n\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2E5\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x5\x1B\x2ED\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2F2\n\x1B\x3"+
		"\x1B\x5\x1B\x2F5\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2FC"+
		"\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x302\n\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x307\n\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D"+
		"\x30F\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x314\n\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x5\x1E\x31A\n\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x31F\n\x1E\f\x1E"+
		"\xE\x1E\x322\v\x1E\x5\x1E\x324\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E"+
		"\x32A\n\x1E\f\x1E\xE\x1E\x32D\v\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\a\x1E\x334\n\x1E\f\x1E\xE\x1E\x337\v\x1E\x5\x1E\x339\n\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x33F\n\x1E\x5\x1E\x341\n\x1E\x3\x1F\x5\x1F\x344"+
		"\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x357\n"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x35D\n\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\a\x1F\x364\n\x1F\f\x1F\xE\x1F\x367\v\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x36B\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x372\n\x1F"+
		"\f\x1F\xE\x1F\x375\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F"+
		"\x37D\n\x1F\f\x1F\xE\x1F\x380\v\x1F\x3\x1F\x3\x1F\a\x1F\x384\n\x1F\f\x1F"+
		"\xE\x1F\x387\v\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x38C\n\x1F\x3 \x3 \x3 "+
		"\x3 \x5 \x392\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x39B\n \x3!\x3!\x3!\x3"+
		"!\x3!\x5!\x3A2\n!\x3!\x3!\x5!\x3A6\n!\x5!\x3A8\n!\x3\"\x3\"\x5\"\x3AC"+
		"\n\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x3B3\n#\x5#\x3B5\n#\x3#\x3#\x5#\x3B9\n"+
		"#\x3#\x5#\x3BC\n#\x3$\x3$\x3$\x3%\x3%\x5%\x3C3\n%\x3%\x3%\x3%\a%\x3C8"+
		"\n%\f%\xE%\x3CB\v%\x5%\x3CD\n%\x3%\x3%\x3%\x3%\x3%\x3%\a%\x3D5\n%\f%\xE"+
		"%\x3D8\v%\x5%\x3DA\n%\x3%\x3%\x3%\x3%\x5%\x3E0\n%\x5%\x3E2\n%\x3&\x3&"+
		"\x5&\x3E6\n&\x3&\x3&\x3&\a&\x3EB\n&\f&\xE&\x3EE\v&\x5&\x3F0\n&\x3&\x3"+
		"&\x3&\x3&\a&\x3F6\n&\f&\xE&\x3F9\v&\x3&\x3&\x3&\x3&\x3&\a&\x400\n&\f&"+
		"\xE&\x403\v&\x5&\x405\n&\x3&\x3&\x3&\x3&\x5&\x40B\n&\x5&\x40D\n&\x3\'"+
		"\x3\'\x5\'\x411\n\'\x3\'\x3\'\x3\'\a\'\x416\n\'\f\'\xE\'\x419\v\'\x3\'"+
		"\x3\'\x3\'\x3\'\a\'\x41F\n\'\f\'\xE\'\x422\v\'\x3\'\x5\'\x425\n\'\x5\'"+
		"\x427\n\'\x3\'\x3\'\x5\'\x42B\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x432\n"+
		"\'\f\'\xE\'\x435\v\'\x3\'\x3\'\x5\'\x439\n\'\x5\'\x43B\n\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\a\'\x442\n\'\f\'\xE\'\x445\v\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\a\'\x44D\n\'\f\'\xE\'\x450\v\'\x3\'\x3\'\a\'\x454\n\'\f\'\xE\'\x457"+
		"\v\'\x5\'\x459\n\'\x3(\x5(\x45C\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x5(\x469\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\a(\x475"+
		"\n(\f(\xE(\x478\v(\x3(\x3(\x5(\x47C\n(\x3)\x5)\x47F\n)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x48C\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\a)\x498\n)\f)\xE)\x49B\v)\x3)\x3)\x5)\x49F\n)\x3)\x3)\x3"+
		")\x3)\x3)\a)\x4A6\n)\f)\xE)\x4A9\v)\x5)\x4AB\n)\x3)\x3)\x3)\x3)\x5)\x4B1"+
		"\n)\x5)\x4B3\n)\x3*\x3*\x3+\x3+\x5+\x4B9\n+\x3+\a+\x4BC\n+\f+\xE+\x4BF"+
		"\v+\x3,\x6,\x4C2\n,\r,\xE,\x4C3\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x5,\x4D0\n,\x3-\x3-\x5-\x4D4\n-\x3-\x3-\x3-\x5-\x4D9\n-\x3-\x3-\x5-"+
		"\x4DD\n-\x3-\x5-\x4E0\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x5-\x4F2\n-\x3-\x3-\x3-\x5-\x4F7\n-\x3.\x3.\x3.\x5."+
		"\x4FC\n.\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x507\n/\x3/\x3/\x3/\x5"+
		"/\x50C\n/\x3/\x3/\x3/\x3/\x5/\x512\n/\x3/\x3/\x3/\a/\x517\n/\f/\xE/\x51A"+
		"\v/\x3/\x5/\x51D\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x5/\x52D\n/\x3/\x5/\x530\n/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x538\n/"+
		"\x3/\x3/\x3/\x3/\x3/\x6/\x53F\n/\r/\xE/\x540\x3/\x3/\x5/\x545\n/\x3/\x3"+
		"/\x3/\x5/\x54A\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/"+
		"\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x568"+
		"\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x574\n/\x3/\x3/\x3/\x5"+
		"/\x579\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x585\n/\x3/\x3/"+
		"\x3/\x3/\x5/\x58B\n/\x3/\x3/\x3/\x3/\x3/\x5/\x592\n/\x3/\x3/\x5/\x596"+
		"\n/\x3/\x3/\x3/\x3/\x3/\x3/\a/\x59E\n/\f/\xE/\x5A1\v/\x5/\x5A3\n/\x3/"+
		"\x3/\x3/\x3/\x5/\x5A9\n/\x3/\x5/\x5AC\n/\a/\x5AE\n/\f/\xE/\x5B1\v/\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\a\x30\x5B9\n\x30\f\x30\xE\x30"+
		"\x5BC\v\x30\x3\x30\x3\x30\x5\x30\x5C0\n\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x5CC\n\x30\x3\x30\x3"+
		"\x30\x5\x30\x5D0\n\x30\a\x30\x5D2\n\x30\f\x30\xE\x30\x5D5\v\x30\x3\x30"+
		"\x5\x30\x5D8\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x5DF\n\x30"+
		"\x5\x30\x5E1\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x5E9"+
		"\n\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x5\x32\x5F0\n\x32\x3\x32\x5"+
		"\x32\x5F3\n\x32\x3\x33\x3\x33\x5\x33\x5F7\n\x33\x3\x33\x3\x33\x3\x33\x5"+
		"\x33\x5FC\n\x33\x3\x33\x3\x33\x3\x33\x3\x33\a\x33\x602\n\x33\f\x33\xE"+
		"\x33\x605\v\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\a\x33\x615\n\x33\f\x33\xE\x33"+
		"\x618\v\x33\x3\x33\x3\x33\x3\x33\x5\x33\x61D\n\x33\x3\x34\x3\x34\x5\x34"+
		"\x621\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\a\x34\x62F\n\x34\f\x34\xE\x34\x632\v\x34\x3"+
		"\x35\x3\x35\x3\x35\x5\x35\x637\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x5\x35\x63E\n\x35\x3\x35\x3\x35\x3\x35\x5\x35\x643\n\x35\x3\x36\x3\x36"+
		"\x3\x36\x5\x36\x648\n\x36\x3\x36\x5\x36\x64B\n\x36\x3\x37\x3\x37\x3\x37"+
		"\x5\x37\x650\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x657\n\x38"+
		"\f\x38\xE\x38\x65A\v\x38\x3\x38\x3\x38\x5\x38\x65E\n\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39"+
		"\x5\x39\x66C\n\x39\x3\x39\x5\x39\x66F\n\x39\x5\x39\x671\n\x39\x3:\x3:"+
		"\x3:\x5:\x676\n:\x3:\x3:\x5:\x67A\n:\x3:\x5:\x67D\n:\x3:\x3:\x3:\x3:\x3"+
		":\x5:\x684\n:\x3:\x3:\x3:\x3:\a:\x68A\n:\f:\xE:\x68D\v:\x3:\x5:\x690\n"+
		":\x3:\x3:\x5:\x694\n:\x3:\x5:\x697\n:\x3:\x3:\x3:\x3:\x5:\x69D\n:\x3:"+
		"\x5:\x6A0\n:\x5:\x6A2\n:\x3;\x3;\x3;\x3;\x3;\a;\x6A9\n;\f;\xE;\x6AC\v"+
		";\x3<\x3<\x5<\x6B0\n<\x3<\x3<\x5<\x6B4\n<\x3<\x3<\x5<\x6B8\n<\x3<\x5<"+
		"\x6BB\n<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\a=\x6C4\n=\f=\xE=\x6C7\v=\x3=\x3"+
		"=\x5=\x6CB\n=\x3>\x3>\x5>\x6CF\n>\x3>\x3>\x3>\a>\x6D4\n>\f>\xE>\x6D7\v"+
		">\x3>\x3>\x3>\x3>\a>\x6DD\n>\f>\xE>\x6E0\v>\x3>\x5>\x6E3\n>\x5>\x6E5\n"+
		">\x3>\x3>\x5>\x6E9\n>\x3>\x3>\x3>\x3>\x3>\a>\x6F0\n>\f>\xE>\x6F3\v>\x3"+
		">\x3>\x5>\x6F7\n>\x5>\x6F9\n>\x3>\x3>\x3>\x3>\x3>\a>\x700\n>\f>\xE>\x703"+
		"\v>\x3>\x3>\x3>\x3>\x3>\x3>\a>\x70B\n>\f>\xE>\x70E\v>\x3>\x3>\a>\x712"+
		"\n>\f>\xE>\x715\v>\x5>\x717\n>\x3?\x3?\x3?\x3?\x3?\x5?\x71E\n?\x3@\x3"+
		"@\x3@\x3@\x3@\a@\x725\n@\f@\xE@\x728\v@\x3@\x3@\x5@\x72C\n@\x3\x41\x5"+
		"\x41\x72F\n\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44"+
		"\x3\x45\x3\x45\x5\x45\x73B\n\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3I\x3"+
		"I\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3O\x3O\x3P\x3P\x3Q\x3Q\x3R"+
		"\x3R\x3S\x3S\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3"+
		"Y\x3Y\x3Y\x5Y\x76A\nY\x3Y\x2\x2\x3\\Z\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2"+
		"|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2"+
		"\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2"+
		"\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\x2\x14\x5\x2\x41\x41MMZZ\x4"+
		"\x2\x33\x33JJ\x4\x2\b\bvv\x3\x2\x94\x95\x4\x2  \x46\x46\x4\x2%%\x43\x43"+
		"\a\x2\x1C\x1CPPYY\x87\x87\x8A\x8A\x4\x2\n\n\xF\x10\x3\x2\v\f\x3\x2\x11"+
		"\x14\x3\x2\x15\x18\x6\x2UUjjll\x83\x83\x4\x2\x42\x42\x9C\x9C\x5\x2\x1C"+
		"\x1CPP\x8A\x8A\x6\x2:<tt\xA7\xA7\xA9\xAA\x4\x2\v\rrr\x4\x2\xA6\xA6\xA9"+
		"\xA9\x3\x2\x1C\xA5\x897\x2\xB7\x3\x2\x2\x2\x4\xBC\x3\x2\x2\x2\x6\xC2\x3"+
		"\x2\x2\x2\b\xD9\x3\x2\x2\x2\n\xDB\x3\x2\x2\x2\f\xE9\x3\x2\x2\x2\xE\xEE"+
		"\x3\x2\x2\x2\x10\x108\x3\x2\x2\x2\x12\x12C\x3\x2\x2\x2\x14\x162\x3\x2"+
		"\x2\x2\x16\x190\x3\x2\x2\x2\x18\x199\x3\x2\x2\x2\x1A\x1A2\x3\x2\x2\x2"+
		"\x1C\x1AA\x3\x2\x2\x2\x1E\x1B4\x3\x2\x2\x2 \x1C7\x3\x2\x2\x2\"\x1EB\x3"+
		"\x2\x2\x2$\x20F\x3\x2\x2\x2&\x238\x3\x2\x2\x2(\x27D\x3\x2\x2\x2*\x290"+
		"\x3\x2\x2\x2,\x2AE\x3\x2\x2\x2.\x2B8\x3\x2\x2\x2\x30\x2D5\x3\x2\x2\x2"+
		"\x32\x2DB\x3\x2\x2\x2\x34\x2E8\x3\x2\x2\x2\x36\x2FD\x3\x2\x2\x2\x38\x30A"+
		"\x3\x2\x2\x2:\x323\x3\x2\x2\x2<\x343\x3\x2\x2\x2>\x38D\x3\x2\x2\x2@\x39C"+
		"\x3\x2\x2\x2\x42\x3A9\x3\x2\x2\x2\x44\x3AF\x3\x2\x2\x2\x46\x3BD\x3\x2"+
		"\x2\x2H\x3CC\x3\x2\x2\x2J\x3EF\x3\x2\x2\x2L\x458\x3\x2\x2\x2N\x45B\x3"+
		"\x2\x2\x2P\x47E\x3\x2\x2\x2R\x4B4\x3\x2\x2\x2T\x4B6\x3\x2\x2\x2V\x4C1"+
		"\x3\x2\x2\x2X\x4D3\x3\x2\x2\x2Z\x4FB\x3\x2\x2\x2\\\x549\x3\x2\x2\x2^\x5B2"+
		"\x3\x2\x2\x2`\x5E2\x3\x2\x2\x2\x62\x5EC\x3\x2\x2\x2\x64\x5F6\x3\x2\x2"+
		"\x2\x66\x61E\x3\x2\x2\x2h\x636\x3\x2\x2\x2j\x644\x3\x2\x2\x2l\x64F\x3"+
		"\x2\x2\x2n\x651\x3\x2\x2\x2p\x670\x3\x2\x2\x2r\x6A1\x3\x2\x2\x2t\x6A3"+
		"\x3\x2\x2\x2v\x6BA\x3\x2\x2\x2x\x6CA\x3\x2\x2\x2z\x716\x3\x2\x2\x2|\x71D"+
		"\x3\x2\x2\x2~\x71F\x3\x2\x2\x2\x80\x72E\x3\x2\x2\x2\x82\x732\x3\x2\x2"+
		"\x2\x84\x734\x3\x2\x2\x2\x86\x736\x3\x2\x2\x2\x88\x73A\x3\x2\x2\x2\x8A"+
		"\x73C\x3\x2\x2\x2\x8C\x73E\x3\x2\x2\x2\x8E\x740\x3\x2\x2\x2\x90\x742\x3"+
		"\x2\x2\x2\x92\x744\x3\x2\x2\x2\x94\x746\x3\x2\x2\x2\x96\x748\x3\x2\x2"+
		"\x2\x98\x74A\x3\x2\x2\x2\x9A\x74C\x3\x2\x2\x2\x9C\x74E\x3\x2\x2\x2\x9E"+
		"\x750\x3\x2\x2\x2\xA0\x752\x3\x2\x2\x2\xA2\x754\x3\x2\x2\x2\xA4\x756\x3"+
		"\x2\x2\x2\xA6\x758\x3\x2\x2\x2\xA8\x75A\x3\x2\x2\x2\xAA\x75C\x3\x2\x2"+
		"\x2\xAC\x75E\x3\x2\x2\x2\xAE\x760\x3\x2\x2\x2\xB0\x769\x3\x2\x2\x2\xB2"+
		"\xB6\x5\x4\x3\x2\xB3\xB6\x5\x6\x4\x2\xB4\xB6\x5\xE\b\x2\xB5\xB2\x3\x2"+
		"\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7"+
		"\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBA\x3\x2\x2\x2\xB9\xB7\x3\x2"+
		"\x2\x2\xBA\xBB\a\x2\x2\x3\xBB\x3\x3\x2\x2\x2\xBC\xBD\a\xAE\x2\x2\xBD\xBE"+
		"\b\x3\x1\x2\xBE\x5\x3\x2\x2\x2\xBF\xC1\a\x4\x2\x2\xC0\xBF\x3\x2\x2\x2"+
		"\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC5\x3"+
		"\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xCE\x5\b\x5\x2\xC6\xC8\a\x4\x2\x2\xC7"+
		"\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2"+
		"\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCD\x5\b\x5\x2\xCC\xC7\x3\x2\x2\x2\xCD"+
		"\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD4\x3\x2"+
		"\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD3\a\x4\x2\x2\xD2\xD1\x3\x2\x2\x2\xD3"+
		"\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\a\x3\x2\x2"+
		"\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDA\x5\n\x6\x2\xD8\xDA\x5\f\a\x2\xD9\xD7\x3"+
		"\x2\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA\t\x3\x2\x2\x2\xDB\xDC\a\x35\x2\x2\xDC"+
		"\xDD\x5\\/\x2\xDD\xDE\a\xF\x2\x2\xDE\xE1\x5\\/\x2\xDF\xE0\a\x3\x2\x2\xE0"+
		"\xE2\x5\\/\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE7\x3\x2\x2"+
		"\x2\xE3\xE4\a$\x2\x2\xE4\xE8\a\x92\x2\x2\xE5\xE6\a$\x2\x2\xE6\xE8\a\x91"+
		"\x2\x2\xE7\xE3\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8"+
		"\v\x3\x2\x2\x2\xE9\xEA\a\x44\x2\x2\xEA\r\x3\x2\x2\x2\xEB\xED\a\x4\x2\x2"+
		"\xEC\xEB\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3"+
		"\x2\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF1\xFA\x5\x10\t\x2"+
		"\xF2\xF4\a\x4\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF3\x3"+
		"\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9\x5\x10\t\x2"+
		"\xF8\xF3\x3\x2\x2\x2\xF9\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3"+
		"\x2\x2\x2\xFB\x100\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\xFF\a\x4\x2\x2"+
		"\xFE\xFD\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101"+
		"\x3\x2\x2\x2\x101\xF\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x106\aO\x2"+
		"\x2\x104\x105\a\x7F\x2\x2\x105\x107\a{\x2\x2\x106\x104\x3\x2\x2\x2\x106"+
		"\x107\x3\x2\x2\x2\x107\x109\x3\x2\x2\x2\x108\x103\x3\x2\x2\x2\x108\x109"+
		"\x3\x2\x2\x2\x109\x12A\x3\x2\x2\x2\x10A\x12B\x5\x12\n\x2\x10B\x12B\x5"+
		"\x18\r\x2\x10C\x12B\x5\x1A\xE\x2\x10D\x12B\x5\x1C\xF\x2\x10E\x12B\x5\x1E"+
		"\x10\x2\x10F\x12B\x5 \x11\x2\x110\x12B\x5\"\x12\x2\x111\x12B\x5$\x13\x2"+
		"\x112\x12B\x5&\x14\x2\x113\x12B\x5(\x15\x2\x114\x12B\x5*\x16\x2\x115\x12B"+
		"\x5,\x17\x2\x116\x12B\x5.\x18\x2\x117\x12B\x5\x30\x19\x2\x118\x12B\x5"+
		"\x32\x1A\x2\x119\x12B\x5\x34\x1B\x2\x11A\x12B\x5\x36\x1C\x2\x11B\x12B"+
		"\x5\x38\x1D\x2\x11C\x12B\x5:\x1E\x2\x11D\x12B\x5<\x1F\x2\x11E\x12B\x5"+
		"> \x2\x11F\x12B\x5@!\x2\x120\x12B\x5\x42\"\x2\x121\x12B\x5\x44#\x2\x122"+
		"\x12B\x5\x46$\x2\x123\x12B\x5\x14\v\x2\x124\x12B\x5\x16\f\x2\x125\x12B"+
		"\x5H%\x2\x126\x12B\x5J&\x2\x127\x12B\x5N(\x2\x128\x12B\x5P)\x2\x129\x12B"+
		"\x5R*\x2\x12A\x10A\x3\x2\x2\x2\x12A\x10B\x3\x2\x2\x2\x12A\x10C\x3\x2\x2"+
		"\x2\x12A\x10D\x3\x2\x2\x2\x12A\x10E\x3\x2\x2\x2\x12A\x10F\x3\x2\x2\x2"+
		"\x12A\x110\x3\x2\x2\x2\x12A\x111\x3\x2\x2\x2\x12A\x112\x3\x2\x2\x2\x12A"+
		"\x113\x3\x2\x2\x2\x12A\x114\x3\x2\x2\x2\x12A\x115\x3\x2\x2\x2\x12A\x116"+
		"\x3\x2\x2\x2\x12A\x117\x3\x2\x2\x2\x12A\x118\x3\x2\x2\x2\x12A\x119\x3"+
		"\x2\x2\x2\x12A\x11A\x3\x2\x2\x2\x12A\x11B\x3\x2\x2\x2\x12A\x11C\x3\x2"+
		"\x2\x2\x12A\x11D\x3\x2\x2\x2\x12A\x11E\x3\x2\x2\x2\x12A\x11F\x3\x2\x2"+
		"\x2\x12A\x120\x3\x2\x2\x2\x12A\x121\x3\x2\x2\x2\x12A\x122\x3\x2\x2\x2"+
		"\x12A\x123\x3\x2\x2\x2\x12A\x124\x3\x2\x2\x2\x12A\x125\x3\x2\x2\x2\x12A"+
		"\x126\x3\x2\x2\x2\x12A\x127\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A\x129"+
		"\x3\x2\x2\x2\x12B\x11\x3\x2\x2\x2\x12C\x12D\a!\x2\x2\x12D\x131\a\x93\x2"+
		"\x2\x12E\x12F\x5\x92J\x2\x12F\x130\a\x5\x2\x2\x130\x132\x3\x2\x2\x2\x131"+
		"\x12E\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x160"+
		"\x5\x94K\x2\x134\x135\a\x86\x2\x2\x135\x136\a\x97\x2\x2\x136\x161\x5\x98"+
		"M\x2\x137\x139\a\x1E\x2\x2\x138\x13A\a\x32\x2\x2\x139\x138\x3\x2\x2\x2"+
		"\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x161\x5T+\x2\x13C\x13D"+
		"\a\x1E\x2\x2\x13D\x13E\a\x6\x2\x2\x13E\x143\x5T+\x2\x13F\x140\a\b\x2\x2"+
		"\x140\x142\x5T+\x2\x141\x13F\x3\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141"+
		"\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x146\x3\x2\x2\x2\x145\x143\x3"+
		"\x2\x2\x2\x146\x147\a\a\x2\x2\x147\x161\x3\x2\x2\x2\x148\x149\an\x2\x2"+
		"\x149\x14A\a\x6\x2\x2\x14A\x14F\x5T+\x2\x14B\x14C\a\b\x2\x2\x14C\x14E"+
		"\x5T+\x2\x14D\x14B\x3\x2\x2\x2\x14E\x151\x3\x2\x2\x2\x14F\x14D\x3\x2\x2"+
		"\x2\x14F\x150\x3\x2\x2\x2\x150\x152\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2"+
		"\x152\x153\a\a\x2\x2\x153\x161\x3\x2\x2\x2\x154\x155\aG\x2\x2\x155\x156"+
		"\a\x6\x2\x2\x156\x15B\x5T+\x2\x157\x158\a\b\x2\x2\x158\x15A\x5T+\x2\x159"+
		"\x157\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C"+
		"\x3\x2\x2\x2\x15C\x15E\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x15F\a\a"+
		"\x2\x2\x15F\x161\x3\x2\x2\x2\x160\x134\x3\x2\x2\x2\x160\x137\x3\x2\x2"+
		"\x2\x160\x13C\x3\x2\x2\x2\x160\x148\x3\x2\x2\x2\x160\x154\x3\x2\x2\x2"+
		"\x161\x13\x3\x2\x2\x2\x162\x163\a\x38\x2\x2\x163\x167\a\x8F\x2\x2\x164"+
		"\x165\x5\x92J\x2\x165\x166\a\x5\x2\x2\x166\x168\x3\x2\x2\x2\x167\x164"+
		"\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16D\x5"+
		"\x94K\x2\x16A\x16B\a\\\x2\x2\x16B\x16C\a+\x2\x2\x16C\x16E\x5\\/\x2\x16D"+
		"\x16A\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x172\x3\x2\x2\x2\x16F\x170"+
		"\a\x90\x2\x2\x170\x171\a\xA4\x2\x2\x171\x173\x5\\/\x2\x172\x16F\x3\x2"+
		"\x2\x2\x172\x173\x3\x2\x2\x2\x173\x178\x3\x2\x2\x2\x174\x175\aq\x2\x2"+
		"\x175\x179\ao\x2\x2\x176\x177\ao\x2\x2\x177\x179\x5\\/\x2\x178\x174\x3"+
		"\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17E\x3\x2"+
		"\x2\x2\x17A\x17B\aq\x2\x2\x17B\x17F\am\x2\x2\x17C\x17D\am\x2\x2\x17D\x17F"+
		"\x5\\/\x2\x17E\x17A\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17E\x17F\x3\x2"+
		"\x2\x2\x17F\x183\x3\x2\x2\x2\x180\x181\aq\x2\x2\x181\x184\a=\x2\x2\x182"+
		"\x184\a=\x2\x2\x183\x180\x3\x2\x2\x2\x183\x182\x3\x2\x2\x2\x183\x184\x3"+
		"\x2\x2\x2\x184\x189\x3\x2\x2\x2\x185\x186\aq\x2\x2\x186\x18A\a.\x2\x2"+
		"\x187\x188\a.\x2\x2\x188\x18A\x5\\/\x2\x189\x185\x3\x2\x2\x2\x189\x187"+
		"\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18E\x3\x2\x2\x2\x18B\x18C\aq"+
		"\x2\x2\x18C\x18F\ay\x2\x2\x18D\x18F\ay\x2\x2\x18E\x18B\x3\x2\x2\x2\x18E"+
		"\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x15\x3\x2\x2\x2\x190\x191"+
		"\aG\x2\x2\x191\x195\a\x8F\x2\x2\x192\x193\x5\x92J\x2\x193\x194\a\x5\x2"+
		"\x2\x194\x196\x3\x2\x2\x2\x195\x192\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2"+
		"\x196\x197\x3\x2\x2\x2\x197\x198\x5\x94K\x2\x198\x17\x3\x2\x2\x2\x199"+
		"\x1A0\a\"\x2\x2\x19A\x1A1\x5\x92J\x2\x19B\x1A1\x5\x96L\x2\x19C\x19D\x5"+
		"\x92J\x2\x19D\x19E\a\x5\x2\x2\x19E\x19F\x5\x96L\x2\x19F\x1A1\x3\x2\x2"+
		"\x2\x1A0\x19A\x3\x2\x2\x2\x1A0\x19B\x3\x2\x2\x2\x1A0\x19C\x3\x2\x2\x2"+
		"\x1A0\x1A1\x3\x2\x2\x2\x1A1\x19\x3\x2\x2\x2\x1A2\x1A4\a&\x2\x2\x1A3\x1A5"+
		"\a>\x2\x2\x1A4\x1A3\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6\x3\x2"+
		"\x2\x2\x1A6\x1A7\x5\\/\x2\x1A7\x1A8\a$\x2\x2\x1A8\x1A9\x5\x92J\x2\x1A9"+
		"\x1B\x3\x2\x2\x2\x1AA\x1AC\a)\x2\x2\x1AB\x1AD\t\x2\x2\x2\x1AC\x1AB\x3"+
		"\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1B2\x3\x2\x2\x2\x1AE\x1B0\a\x98"+
		"\x2\x2\x1AF\x1B1\x5\xAEX\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2"+
		"\x1B1\x1B3\x3\x2\x2\x2\x1B2\x1AE\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3"+
		"\x1D\x3\x2\x2\x2\x1B4\x1B9\t\x3\x2\x2\x1B5\x1B7\a\x98\x2\x2\x1B6\x1B8"+
		"\x5\xAEX\x2\x1B7\x1B6\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1BA\x3\x2"+
		"\x2\x2\x1B9\x1B5\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1F\x3\x2\x2\x2"+
		"\x1BB\x1BD\a\xA4\x2\x2\x1BC\x1BE\a\x81\x2\x2\x1BD\x1BC\x3\x2\x2\x2\x1BD"+
		"\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C4\x5n\x38\x2\x1C0\x1C1"+
		"\a\b\x2\x2\x1C1\x1C3\x5n\x38\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C6\x3\x2"+
		"\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C8\x3\x2\x2"+
		"\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1BB\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2"+
		"\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1D3\x5z>\x2\x1CA\x1CC\a\x9A\x2\x2\x1CB\x1CD"+
		"\a \x2\x2\x1CC\x1CB\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1D1\x3\x2"+
		"\x2\x2\x1CE\x1D1\a\x63\x2\x2\x1CF\x1D1\aL\x2\x2\x1D0\x1CA\x3\x2\x2\x2"+
		"\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2"+
		"\x1D4\x5z>\x2\x1D3\x1D0\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D3\x3"+
		"\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1E1\x3\x2\x2\x2\x1D7\x1D8\ay\x2"+
		"\x2\x1D8\x1D9\a+\x2\x2\x1D9\x1DE\x5j\x36\x2\x1DA\x1DB\a\b\x2\x2\x1DB\x1DD"+
		"\x5j\x36\x2\x1DC\x1DA\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2\x1DE\x1DC\x3\x2"+
		"\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E2\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2"+
		"\x2\x1E1\x1D7\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E9\x3\x2\x2\x2"+
		"\x1E3\x1E4\ak\x2\x2\x1E4\x1E7\x5\\/\x2\x1E5\x1E6\t\x4\x2\x2\x1E6\x1E8"+
		"\x5\\/\x2\x1E7\x1E5\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1EA\x3\x2"+
		"\x2\x2\x1E9\x1E3\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA!\x3\x2\x2\x2\x1EB"+
		"\x1ED\a\x38\x2\x2\x1EC\x1EE\a\x9B\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1ED\x1EE"+
		"\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F3\a]\x2\x2\x1F0\x1F1\aX\x2"+
		"\x2\x1F1\x1F2\ar\x2\x2\x1F2\x1F4\aN\x2\x2\x1F3\x1F0\x3\x2\x2\x2\x1F3\x1F4"+
		"\x3\x2\x2\x2\x1F4\x1F8\x3\x2\x2\x2\x1F5\x1F6\x5\x92J\x2\x1F6\x1F7\a\x5"+
		"\x2\x2\x1F7\x1F9\x3\x2\x2\x2\x1F8\x1F5\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2"+
		"\x2\x1F9\x1FA\x3\x2\x2\x2\x1FA\x1FB\x5\xA0Q\x2\x1FB\x1FC\aw\x2\x2\x1FC"+
		"\x1FD\x5\x94K\x2\x1FD\x1FE\a\x6\x2\x2\x1FE\x203\x5\x62\x32\x2\x1FF\x200"+
		"\a\b\x2\x2\x200\x202\x5\x62\x32\x2\x201\x1FF\x3\x2\x2\x2\x202\x205\x3"+
		"\x2\x2\x2\x203\x201\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x206\x3\x2"+
		"\x2\x2\x205\x203\x3\x2\x2\x2\x206\x209\a\a\x2\x2\x207\x208\a\xA3\x2\x2"+
		"\x208\x20A\x5\\/\x2\x209\x207\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20D"+
		"\x3\x2\x2\x2\x20B\x20C\a[\x2\x2\x20C\x20E\x5\\/\x2\x20D\x20B\x3\x2\x2"+
		"\x2\x20D\x20E\x3\x2\x2\x2\x20E#\x3\x2\x2\x2\x20F\x211\a\x38\x2\x2\x210"+
		"\x212\t\x5\x2\x2\x211\x210\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x213"+
		"\x3\x2\x2\x2\x213\x217\a\x93\x2\x2\x214\x215\aX\x2\x2\x215\x216\ar\x2"+
		"\x2\x216\x218\aN\x2\x2\x217\x214\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218"+
		"\x21C\x3\x2\x2\x2\x219\x21A\x5\x92J\x2\x21A\x21B\a\x5\x2\x2\x21B\x21D"+
		"\x3\x2\x2\x2\x21C\x219\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21E\x3"+
		"\x2\x2\x2\x21E\x236\x5\x94K\x2\x21F\x220\a\x6\x2\x2\x220\x225\x5T+\x2"+
		"\x221\x222\a\b\x2\x2\x222\x224\x5T+\x2\x223\x221\x3\x2\x2\x2\x224\x227"+
		"\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x22C\x3"+
		"\x2\x2\x2\x227\x225\x3\x2\x2\x2\x228\x229\a\b\x2\x2\x229\x22B\x5\x64\x33"+
		"\x2\x22A\x228\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2"+
		"\x22C\x22D\x3\x2\x2\x2\x22D\x22F\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F"+
		"\x232\a\a\x2\x2\x230\x231\a\xA5\x2\x2\x231\x233\a\xA6\x2\x2\x232\x230"+
		"\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x237\x3\x2\x2\x2\x234\x235\a$"+
		"\x2\x2\x235\x237\x5J&\x2\x236\x21F\x3\x2\x2\x2\x236\x234\x3\x2\x2\x2\x237"+
		"%\x3\x2\x2\x2\x238\x23A\a\x38\x2\x2\x239\x23B\t\x5\x2\x2\x23A\x239\x3"+
		"\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x23C\x3\x2\x2\x2\x23C\x240\a\x99"+
		"\x2\x2\x23D\x23E\aX\x2\x2\x23E\x23F\ar\x2\x2\x23F\x241\aN\x2\x2\x240\x23D"+
		"\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x245\x3\x2\x2\x2\x242\x243\x5"+
		"\x92J\x2\x243\x244\a\x5\x2\x2\x244\x246\x3\x2\x2\x2\x245\x242\x3\x2\x2"+
		"\x2\x245\x246\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x24C\x5\xA2R\x2\x248"+
		"\x24D\a(\x2\x2\x249\x24D\a\x1F\x2\x2\x24A\x24B\a\x62\x2\x2\x24B\x24D\a"+
		"u\x2\x2\x24C\x248\x3\x2\x2\x2\x24C\x249\x3\x2\x2\x2\x24C\x24A\x3\x2\x2"+
		"\x2\x24C\x24D\x3\x2\x2\x2\x24D\x25C\x3\x2\x2\x2\x24E\x25D\a\x42\x2\x2"+
		"\x24F\x25D\a\x61\x2\x2\x250\x25A\a\x9C\x2\x2\x251\x252\au\x2\x2\x252\x257"+
		"\x5\x9AN\x2\x253\x254\a\b\x2\x2\x254\x256\x5\x9AN\x2\x255\x253\x3\x2\x2"+
		"\x2\x256\x259\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2"+
		"\x258\x25B\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A\x251\x3\x2\x2\x2\x25A"+
		"\x25B\x3\x2\x2\x2\x25B\x25D\x3\x2\x2\x2\x25C\x24E\x3\x2\x2\x2\x25C\x24F"+
		"\x3\x2\x2\x2\x25C\x250\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x262\aw"+
		"\x2\x2\x25F\x260\x5\x92J\x2\x260\x261\a\x5\x2\x2\x261\x263\x3\x2\x2\x2"+
		"\x262\x25F\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264"+
		"\x268\x5\x94K\x2\x265\x266\aQ\x2\x2\x266\x267\aH\x2\x2\x267\x269\a\x8B"+
		"\x2\x2\x268\x265\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269\x26C\x3\x2\x2"+
		"\x2\x26A\x26B\a\xA2\x2\x2\x26B\x26D\x5\\/\x2\x26C\x26A\x3\x2\x2\x2\x26C"+
		"\x26D\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x277\a)\x2\x2\x26F\x274\x5"+
		"N(\x2\x270\x274\x5<\x1F\x2\x271\x274\x5,\x17\x2\x272\x274\x5J&\x2\x273"+
		"\x26F\x3\x2\x2\x2\x273\x270\x3\x2\x2\x2\x273\x271\x3\x2\x2\x2\x273\x272"+
		"\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\a\x4\x2\x2\x276\x278\x3\x2"+
		"\x2\x2\x277\x273\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x277\x3\x2\x2"+
		"\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27C\aJ\x2\x2\x27C"+
		"\'\x3\x2\x2\x2\x27D\x27F\a\x38\x2\x2\x27E\x280\t\x5\x2\x2\x27F\x27E\x3"+
		"\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x285\a\xA0"+
		"\x2\x2\x282\x283\aX\x2\x2\x283\x284\ar\x2\x2\x284\x286\aN\x2\x2\x285\x282"+
		"\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x28A\x3\x2\x2\x2\x287\x288\x5"+
		"\x92J\x2\x288\x289\a\x5\x2\x2\x289\x28B\x3\x2\x2\x2\x28A\x287\x3\x2\x2"+
		"\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28D\x5\xA4S\x2\x28D"+
		"\x28E\a$\x2\x2\x28E\x28F\x5J&\x2\x28F)\x3\x2\x2\x2\x290\x291\a\x38\x2"+
		"\x2\x291\x292\a\xA1\x2\x2\x292\x296\a\x93\x2\x2\x293\x294\aX\x2\x2\x294"+
		"\x295\ar\x2\x2\x295\x297\aN\x2\x2\x296\x293\x3\x2\x2\x2\x296\x297\x3\x2"+
		"\x2\x2\x297\x29B\x3\x2\x2\x2\x298\x299\x5\x92J\x2\x299\x29A\a\x5\x2\x2"+
		"\x29A\x29C\x3\x2\x2\x2\x29B\x298\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C"+
		"\x29D\x3\x2\x2\x2\x29D\x29E\x5\x94K\x2\x29E\x29F\a\x9D\x2\x2\x29F\x2AB"+
		"\x5\xA6T\x2\x2A0\x2A1\a\x6\x2\x2\x2A1\x2A6\x5\x88\x45\x2\x2A2\x2A3\a\b"+
		"\x2\x2\x2A3\x2A5\x5\x88\x45\x2\x2A4\x2A2\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2"+
		"\x2\x2A6\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A9\x3\x2\x2\x2"+
		"\x2A8\x2A6\x3\x2\x2\x2\x2A9\x2AA\a\a\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB"+
		"\x2A0\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC+\x3\x2\x2\x2\x2AD\x2AF\x5"+
		"\x66\x34\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B0\x3\x2"+
		"\x2\x2\x2B0\x2B1\a\x42\x2\x2\x2B1\x2B2\aS\x2\x2\x2B2\x2B5\x5h\x35\x2\x2B3"+
		"\x2B4\a\xA3\x2\x2\x2B4\x2B6\x5\\/\x2\x2B5\x2B3\x3\x2\x2\x2\x2B5\x2B6\x3"+
		"\x2\x2\x2\x2B6-\x3\x2\x2\x2\x2B7\x2B9\x5\x66\x34\x2\x2B8\x2B7\x3\x2\x2"+
		"\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x2BB\a\x42\x2\x2"+
		"\x2BB\x2BC\aS\x2\x2\x2BC\x2BF\x5h\x35\x2\x2BD\x2BE\a\xA3\x2\x2\x2BE\x2C0"+
		"\x5\\/\x2\x2BF\x2BD\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2D3\x3\x2"+
		"\x2\x2\x2C1\x2C2\ay\x2\x2\x2C2\x2C3\a+\x2\x2\x2C3\x2C8\x5j\x36\x2\x2C4"+
		"\x2C5\a\b\x2\x2\x2C5\x2C7\x5j\x36\x2\x2C6\x2C4\x3\x2\x2\x2\x2C7\x2CA\x3"+
		"\x2\x2\x2\x2C8\x2C6\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2CC\x3\x2"+
		"\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CB\x2C1\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2"+
		"\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CE\ak\x2\x2\x2CE\x2D1\x5\\/\x2\x2CF\x2D0"+
		"\t\x4\x2\x2\x2D0\x2D2\x5\\/\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2"+
		"\x2\x2D2\x2D4\x3\x2\x2\x2\x2D3\x2CB\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2"+
		"\x2D4/\x3\x2\x2\x2\x2D5\x2D7\a\x45\x2\x2\x2D6\x2D8\a>\x2\x2\x2D7\x2D6"+
		"\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DA\x5"+
		"\x92J\x2\x2DA\x31\x3\x2\x2\x2\x2DB\x2DC\aG\x2\x2\x2DC\x2DF\a]\x2\x2\x2DD"+
		"\x2DE\aX\x2\x2\x2DE\x2E0\aN\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2DF\x2E0\x3\x2"+
		"\x2\x2\x2E0\x2E4\x3\x2\x2\x2\x2E1\x2E2\x5\x92J\x2\x2E2\x2E3\a\x5\x2\x2"+
		"\x2E3\x2E5\x3\x2\x2\x2\x2E4\x2E1\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5"+
		"\x2E6\x3\x2\x2\x2\x2E6\x2E7\x5\xA0Q\x2\x2E7\x33\x3\x2\x2\x2\x2E8\x2E9"+
		"\aG\x2\x2\x2E9\x2EC\a\x93\x2\x2\x2EA\x2EB\aX\x2\x2\x2EB\x2ED\aN\x2\x2"+
		"\x2EC\x2EA\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2F1\x3\x2\x2\x2\x2EE"+
		"\x2EF\x5\x92J\x2\x2EF\x2F0\a\x5\x2\x2\x2F0\x2F2\x3\x2\x2\x2\x2F1\x2EE"+
		"\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F4\x3\x2\x2\x2\x2F3\x2F5\x5"+
		"\x94K\x2\x2F4\x2F3\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2FB\x3\x2\x2"+
		"\x2\x2F6\x2F7\a,\x2\x2\x2F7\x2FC\a\x37\x2\x2\x2F8\x2F9\a,\x2\x2\x2F9\x2FA"+
		"\a\x37\x2\x2\x2FA\x2FC\a~\x2\x2\x2FB\x2F6\x3\x2\x2\x2\x2FB\x2F8\x3\x2"+
		"\x2\x2\x2FC\x35\x3\x2\x2\x2\x2FD\x2FE\aG\x2\x2\x2FE\x301\a\x99\x2\x2\x2FF"+
		"\x300\aX\x2\x2\x300\x302\aN\x2\x2\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2"+
		"\x2\x2\x302\x306\x3\x2\x2\x2\x303\x304\x5\x92J\x2\x304\x305\a\x5\x2\x2"+
		"\x305\x307\x3\x2\x2\x2\x306\x303\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307"+
		"\x308\x3\x2\x2\x2\x308\x309\x5\xA2R\x2\x309\x37\x3\x2\x2\x2\x30A\x30B"+
		"\aG\x2\x2\x30B\x30E\a\xA0\x2\x2\x30C\x30D\aX\x2\x2\x30D\x30F\aN\x2\x2"+
		"\x30E\x30C\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x313\x3\x2\x2\x2\x310"+
		"\x311\x5\x92J\x2\x311\x312\a\x5\x2\x2\x312\x314\x3\x2\x2\x2\x313\x310"+
		"\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x316\x5"+
		"\xA4S\x2\x316\x39\x3\x2\x2\x2\x317\x319\a\xA4\x2\x2\x318\x31A\a\x81\x2"+
		"\x2\x319\x318\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2"+
		"\x31B\x320\x5n\x38\x2\x31C\x31D\a\b\x2\x2\x31D\x31F\x5n\x38\x2\x31E\x31C"+
		"\x3\x2\x2\x2\x31F\x322\x3\x2\x2\x2\x320\x31E\x3\x2\x2\x2\x320\x321\x3"+
		"\x2\x2\x2\x321\x324\x3\x2\x2\x2\x322\x320\x3\x2\x2\x2\x323\x317\x3\x2"+
		"\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x32B\x5z>\x2\x326"+
		"\x327\x5|?\x2\x327\x328\x5z>\x2\x328\x32A\x3\x2\x2\x2\x329\x326\x3\x2"+
		"\x2\x2\x32A\x32D\x3\x2\x2\x2\x32B\x329\x3\x2\x2\x2\x32B\x32C\x3\x2\x2"+
		"\x2\x32C\x338\x3\x2\x2\x2\x32D\x32B\x3\x2\x2\x2\x32E\x32F\ay\x2\x2\x32F"+
		"\x330\a+\x2\x2\x330\x335\x5j\x36\x2\x331\x332\a\b\x2\x2\x332\x334\x5j"+
		"\x36\x2\x333\x331\x3\x2\x2\x2\x334\x337\x3\x2\x2\x2\x335\x333\x3\x2\x2"+
		"\x2\x335\x336\x3\x2\x2\x2\x336\x339\x3\x2\x2\x2\x337\x335\x3\x2\x2\x2"+
		"\x338\x32E\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x340\x3\x2\x2\x2\x33A"+
		"\x33B\ak\x2\x2\x33B\x33E\x5\\/\x2\x33C\x33D\t\x4\x2\x2\x33D\x33F\x5\\"+
		"/\x2\x33E\x33C\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x341\x3\x2\x2\x2"+
		"\x340\x33A\x3\x2\x2\x2\x340\x341\x3\x2\x2\x2\x341;\x3\x2\x2\x2\x342\x344"+
		"\x5\x66\x34\x2\x343\x342\x3\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344\x356\x3"+
		"\x2\x2\x2\x345\x357\a\x61\x2\x2\x346\x357\a\x87\x2\x2\x347\x348\a\x61"+
		"\x2\x2\x348\x349\ax\x2\x2\x349\x357\a\x87\x2\x2\x34A\x34B\a\x61\x2\x2"+
		"\x34B\x34C\ax\x2\x2\x34C\x357\a\x8A\x2\x2\x34D\x34E\a\x61\x2\x2\x34E\x34F"+
		"\ax\x2\x2\x34F\x357\a\x1C\x2\x2\x350\x351\a\x61\x2\x2\x351\x352\ax\x2"+
		"\x2\x352\x357\aP\x2\x2\x353\x354\a\x61\x2\x2\x354\x355\ax\x2\x2\x355\x357"+
		"\aY\x2\x2\x356\x345\x3\x2\x2\x2\x356\x346\x3\x2\x2\x2\x356\x347\x3\x2"+
		"\x2\x2\x356\x34A\x3\x2\x2\x2\x356\x34D\x3\x2\x2\x2\x356\x350\x3\x2\x2"+
		"\x2\x356\x353\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x35C\a\x64\x2\x2"+
		"\x359\x35A\x5\x92J\x2\x35A\x35B\a\x5\x2\x2\x35B\x35D\x3\x2\x2\x2\x35C"+
		"\x359\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E\x36A"+
		"\x5\x94K\x2\x35F\x360\a\x6\x2\x2\x360\x365\x5\x9AN\x2\x361\x362\a\b\x2"+
		"\x2\x362\x364\x5\x9AN\x2\x363\x361\x3\x2\x2\x2\x364\x367\x3\x2\x2\x2\x365"+
		"\x363\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2\x366\x368\x3\x2\x2\x2\x367\x365"+
		"\x3\x2\x2\x2\x368\x369\a\a\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x35F\x3\x2"+
		"\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x38B\x3\x2\x2\x2\x36C\x36D\a\x9F\x2"+
		"\x2\x36D\x36E\a\x6\x2\x2\x36E\x373\x5\\/\x2\x36F\x370\a\b\x2\x2\x370\x372"+
		"\x5\\/\x2\x371\x36F\x3\x2\x2\x2\x372\x375\x3\x2\x2\x2\x373\x371\x3\x2"+
		"\x2\x2\x373\x374\x3\x2\x2\x2\x374\x376\x3\x2\x2\x2\x375\x373\x3\x2\x2"+
		"\x2\x376\x385\a\a\x2\x2\x377\x378\a\b\x2\x2\x378\x379\a\x6\x2\x2\x379"+
		"\x37E\x5\\/\x2\x37A\x37B\a\b\x2\x2\x37B\x37D\x5\\/\x2\x37C\x37A\x3\x2"+
		"\x2\x2\x37D\x380\x3\x2\x2\x2\x37E\x37C\x3\x2\x2\x2\x37E\x37F\x3\x2\x2"+
		"\x2\x37F\x381\x3\x2\x2\x2\x380\x37E\x3\x2\x2\x2\x381\x382\a\a\x2\x2\x382"+
		"\x384\x3\x2\x2\x2\x383\x377\x3\x2\x2\x2\x384\x387\x3\x2\x2\x2\x385\x383"+
		"\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x38C\x3\x2\x2\x2\x387\x385\x3"+
		"\x2\x2\x2\x388\x38C\x5J&\x2\x389\x38A\a?\x2\x2\x38A\x38C\a\x9F\x2\x2\x38B"+
		"\x36C\x3\x2\x2\x2\x38B\x388\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2\x38C=\x3"+
		"\x2\x2\x2\x38D\x391\a|\x2\x2\x38E\x38F\x5\x92J\x2\x38F\x390\a\x5\x2\x2"+
		"\x390\x392\x3\x2\x2\x2\x391\x38E\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392"+
		"\x393\x3\x2\x2\x2\x393\x39A\x5\xA8U\x2\x394\x395\a\t\x2\x2\x395\x39B\x5"+
		"l\x37\x2\x396\x397\a\x6\x2\x2\x397\x398\x5l\x37\x2\x398\x399\a\a\x2\x2"+
		"\x399\x39B\x3\x2\x2\x2\x39A\x394\x3\x2\x2\x2\x39A\x396\x3\x2\x2\x2\x39A"+
		"\x39B\x3\x2\x2\x2\x39B?\x3\x2\x2\x2\x39C\x3A7\a\x84\x2\x2\x39D\x3A8\x5"+
		"\x9CO\x2\x39E\x39F\x5\x92J\x2\x39F\x3A0\a\x5\x2\x2\x3A0\x3A2\x3\x2\x2"+
		"\x2\x3A1\x39E\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A5\x3\x2\x2\x2"+
		"\x3A3\x3A6\x5\x94K\x2\x3A4\x3A6\x5\xA0Q\x2\x3A5\x3A3\x3\x2\x2\x2\x3A5"+
		"\x3A4\x3\x2\x2\x2\x3A6\x3A8\x3\x2\x2\x2\x3A7\x39D\x3\x2\x2\x2\x3A7\x3A1"+
		"\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x41\x3\x2\x2\x2\x3A9\x3AB\a\x85"+
		"\x2\x2\x3AA\x3AC\a\x8C\x2\x2\x3AB\x3AA\x3\x2\x2\x2\x3AB\x3AC\x3\x2\x2"+
		"\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AE\x5\xAAV\x2\x3AE\x43\x3\x2\x2\x2\x3AF"+
		"\x3B4\a\x8A\x2\x2\x3B0\x3B2\a\x98\x2\x2\x3B1\x3B3\x5\xAEX\x2\x3B2\x3B1"+
		"\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3B5\x3\x2\x2\x2\x3B4\x3B0\x3"+
		"\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3BB\x3\x2\x2\x2\x3B6\x3B8\a\x97"+
		"\x2\x2\x3B7\x3B9\a\x8C\x2\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2"+
		"\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BC\x5\xAAV\x2\x3BB\x3B6\x3\x2\x2\x2\x3BB"+
		"\x3BC\x3\x2\x2\x2\x3BC\x45\x3\x2\x2\x2\x3BD\x3BE\a\x8C\x2\x2\x3BE\x3BF"+
		"\x5\xAAV\x2\x3BFG\x3\x2\x2\x2\x3C0\x3C2\a\xA4\x2\x2\x3C1\x3C3\a\x81\x2"+
		"\x2\x3C2\x3C1\x3\x2\x2\x2\x3C2\x3C3\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2"+
		"\x3C4\x3C9\x5n\x38\x2\x3C5\x3C6\a\b\x2\x2\x3C6\x3C8\x5n\x38\x2\x3C7\x3C5"+
		"\x3\x2\x2\x2\x3C8\x3CB\x3\x2\x2\x2\x3C9\x3C7\x3\x2\x2\x2\x3C9\x3CA\x3"+
		"\x2\x2\x2\x3CA\x3CD\x3\x2\x2\x2\x3CB\x3C9\x3\x2\x2\x2\x3CC\x3C0\x3\x2"+
		"\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3D9\x5z>\x2\x3CF"+
		"\x3D0\ay\x2\x2\x3D0\x3D1\a+\x2\x2\x3D1\x3D6\x5j\x36\x2\x3D2\x3D3\a\b\x2"+
		"\x2\x3D3\x3D5\x5j\x36\x2\x3D4\x3D2\x3\x2\x2\x2\x3D5\x3D8\x3\x2\x2\x2\x3D6"+
		"\x3D4\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2\x2\x3D7\x3DA\x3\x2\x2\x2\x3D8\x3D6"+
		"\x3\x2\x2\x2\x3D9\x3CF\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3E1\x3"+
		"\x2\x2\x2\x3DB\x3DC\ak\x2\x2\x3DC\x3DF\x5\\/\x2\x3DD\x3DE\t\x4\x2\x2\x3DE"+
		"\x3E0\x5\\/\x2\x3DF\x3DD\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E2\x3"+
		"\x2\x2\x2\x3E1\x3DB\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2I\x3\x2\x2\x2"+
		"\x3E3\x3E5\a\xA4\x2\x2\x3E4\x3E6\a\x81\x2\x2\x3E5\x3E4\x3\x2\x2\x2\x3E5"+
		"\x3E6\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3EC\x5n\x38\x2\x3E8\x3E9"+
		"\a\b\x2\x2\x3E9\x3EB\x5n\x38\x2\x3EA\x3E8\x3\x2\x2\x2\x3EB\x3EE\x3\x2"+
		"\x2\x2\x3EC\x3EA\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3F0\x3\x2\x2"+
		"\x2\x3EE\x3EC\x3\x2\x2\x2\x3EF\x3E3\x3\x2\x2\x2\x3EF\x3F0\x3\x2\x2\x2"+
		"\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F7\x5L\'\x2\x3F2\x3F3\x5|?\x2\x3F3\x3F4"+
		"\x5L\'\x2\x3F4\x3F6\x3\x2\x2\x2\x3F5\x3F2\x3\x2\x2\x2\x3F6\x3F9\x3\x2"+
		"\x2\x2\x3F7\x3F5\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8\x404\x3\x2\x2"+
		"\x2\x3F9\x3F7\x3\x2\x2\x2\x3FA\x3FB\ay\x2\x2\x3FB\x3FC\a+\x2\x2\x3FC\x401"+
		"\x5j\x36\x2\x3FD\x3FE\a\b\x2\x2\x3FE\x400\x5j\x36\x2\x3FF\x3FD\x3\x2\x2"+
		"\x2\x400\x403\x3\x2\x2\x2\x401\x3FF\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2"+
		"\x402\x405\x3\x2\x2\x2\x403\x401\x3\x2\x2\x2\x404\x3FA\x3\x2\x2\x2\x404"+
		"\x405\x3\x2\x2\x2\x405\x40C\x3\x2\x2\x2\x406\x407\ak\x2\x2\x407\x40A\x5"+
		"\\/\x2\x408\x409\t\x4\x2\x2\x409\x40B\x5\\/\x2\x40A\x408\x3\x2\x2\x2\x40A"+
		"\x40B\x3\x2\x2\x2\x40B\x40D\x3\x2\x2\x2\x40C\x406\x3\x2\x2\x2\x40C\x40D"+
		"\x3\x2\x2\x2\x40DK\x3\x2\x2\x2\x40E\x410\a\x8D\x2\x2\x40F\x411\t\x6\x2"+
		"\x2\x410\x40F\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2"+
		"\x412\x417\x5p\x39\x2\x413\x414\a\b\x2\x2\x414\x416\x5p\x39\x2\x415\x413"+
		"\x3\x2\x2\x2\x416\x419\x3\x2\x2\x2\x417\x415\x3\x2\x2\x2\x417\x418\x3"+
		"\x2\x2\x2\x418\x426\x3\x2\x2\x2\x419\x417\x3\x2\x2\x2\x41A\x424\aS\x2"+
		"\x2\x41B\x420\x5r:\x2\x41C\x41D\a\b\x2\x2\x41D\x41F\x5r:\x2\x41E\x41C"+
		"\x3\x2\x2\x2\x41F\x422\x3\x2\x2\x2\x420\x41E\x3\x2\x2\x2\x420\x421\x3"+
		"\x2\x2\x2\x421\x425\x3\x2\x2\x2\x422\x420\x3\x2\x2\x2\x423\x425\x5t;\x2"+
		"\x424\x41B\x3\x2\x2\x2\x424\x423\x3\x2\x2\x2\x425\x427\x3\x2\x2\x2\x426"+
		"\x41A\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2\x427\x42A\x3\x2\x2\x2\x428\x429"+
		"\a\xA3\x2\x2\x429\x42B\x5\\/\x2\x42A\x428\x3\x2\x2\x2\x42A\x42B\x3\x2"+
		"\x2\x2\x42B\x43A\x3\x2\x2\x2\x42C\x42D\aV\x2\x2\x42D\x42E\a+\x2\x2\x42E"+
		"\x433\x5\\/\x2\x42F\x430\a\b\x2\x2\x430\x432\x5\\/\x2\x431\x42F\x3\x2"+
		"\x2\x2\x432\x435\x3\x2\x2\x2\x433\x431\x3\x2\x2\x2\x433\x434\x3\x2\x2"+
		"\x2\x434\x438\x3\x2\x2\x2\x435\x433\x3\x2\x2\x2\x436\x437\aW\x2\x2\x437"+
		"\x439\x5\\/\x2\x438\x436\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43B\x3"+
		"\x2\x2\x2\x43A\x42C\x3\x2\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x459\x3\x2"+
		"\x2\x2\x43C\x43D\a\x9F\x2\x2\x43D\x43E\a\x6\x2\x2\x43E\x443\x5\\/\x2\x43F"+
		"\x440\a\b\x2\x2\x440\x442\x5\\/\x2\x441\x43F\x3\x2\x2\x2\x442\x445\x3"+
		"\x2\x2\x2\x443\x441\x3\x2\x2\x2\x443\x444\x3\x2\x2\x2\x444\x446\x3\x2"+
		"\x2\x2\x445\x443\x3\x2\x2\x2\x446\x455\a\a\x2\x2\x447\x448\a\b\x2\x2\x448"+
		"\x449\a\x6\x2\x2\x449\x44E\x5\\/\x2\x44A\x44B\a\b\x2\x2\x44B\x44D\x5\\"+
		"/\x2\x44C\x44A\x3\x2\x2\x2\x44D\x450\x3\x2\x2\x2\x44E\x44C\x3\x2\x2\x2"+
		"\x44E\x44F\x3\x2\x2\x2\x44F\x451\x3\x2\x2\x2\x450\x44E\x3\x2\x2\x2\x451"+
		"\x452\a\a\x2\x2\x452\x454\x3\x2\x2\x2\x453\x447\x3\x2\x2\x2\x454\x457"+
		"\x3\x2\x2\x2\x455\x453\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x459\x3"+
		"\x2\x2\x2\x457\x455\x3\x2\x2\x2\x458\x40E\x3\x2\x2\x2\x458\x43C\x3\x2"+
		"\x2\x2\x459M\x3\x2\x2\x2\x45A\x45C\x5\x66\x34\x2\x45B\x45A\x3\x2\x2\x2"+
		"\x45B\x45C\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x468\a\x9C\x2\x2\x45E"+
		"\x45F\ax\x2\x2\x45F\x469\a\x8A\x2\x2\x460\x461\ax\x2\x2\x461\x469\a\x1C"+
		"\x2\x2\x462\x463\ax\x2\x2\x463\x469\a\x87\x2\x2\x464\x465\ax\x2\x2\x465"+
		"\x469\aP\x2\x2\x466\x467\ax\x2\x2\x467\x469\aY\x2\x2\x468\x45E\x3\x2\x2"+
		"\x2\x468\x460\x3\x2\x2\x2\x468\x462\x3\x2\x2\x2\x468\x464\x3\x2\x2\x2"+
		"\x468\x466\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A"+
		"\x46B\x5h\x35\x2\x46B\x46C\a\x8E\x2\x2\x46C\x46D\x5\x9AN\x2\x46D\x46E"+
		"\a\t\x2\x2\x46E\x476\x5\\/\x2\x46F\x470\a\b\x2\x2\x470\x471\x5\x9AN\x2"+
		"\x471\x472\a\t\x2\x2\x472\x473\x5\\/\x2\x473\x475\x3\x2\x2\x2\x474\x46F"+
		"\x3\x2\x2\x2\x475\x478\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x476\x477\x3"+
		"\x2\x2\x2\x477\x47B\x3\x2\x2\x2\x478\x476\x3\x2\x2\x2\x479\x47A\a\xA3"+
		"\x2\x2\x47A\x47C\x5\\/\x2\x47B\x479\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2"+
		"\x47CO\x3\x2\x2\x2\x47D\x47F\x5\x66\x34\x2\x47E\x47D\x3\x2\x2\x2\x47E"+
		"\x47F\x3\x2\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x48B\a\x9C\x2\x2\x481\x482"+
		"\ax\x2\x2\x482\x48C\a\x8A\x2\x2\x483\x484\ax\x2\x2\x484\x48C\a\x1C\x2"+
		"\x2\x485\x486\ax\x2\x2\x486\x48C\a\x87\x2\x2\x487\x488\ax\x2\x2\x488\x48C"+
		"\aP\x2\x2\x489\x48A\ax\x2\x2\x48A\x48C\aY\x2\x2\x48B\x481\x3\x2\x2\x2"+
		"\x48B\x483\x3\x2\x2\x2\x48B\x485\x3\x2\x2\x2\x48B\x487\x3\x2\x2\x2\x48B"+
		"\x489\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D\x48E"+
		"\x5h\x35\x2\x48E\x48F\a\x8E\x2\x2\x48F\x490\x5\x9AN\x2\x490\x491\a\t\x2"+
		"\x2\x491\x499\x5\\/\x2\x492\x493\a\b\x2\x2\x493\x494\x5\x9AN\x2\x494\x495"+
		"\a\t\x2\x2\x495\x496\x5\\/\x2\x496\x498\x3\x2\x2\x2\x497\x492\x3\x2\x2"+
		"\x2\x498\x49B\x3\x2\x2\x2\x499\x497\x3\x2\x2\x2\x499\x49A\x3\x2\x2\x2"+
		"\x49A\x49E\x3\x2\x2\x2\x49B\x499\x3\x2\x2\x2\x49C\x49D\a\xA3\x2\x2\x49D"+
		"\x49F\x5\\/\x2\x49E\x49C\x3\x2\x2\x2\x49E\x49F\x3\x2\x2\x2\x49F\x4B2\x3"+
		"\x2\x2\x2\x4A0\x4A1\ay\x2\x2\x4A1\x4A2\a+\x2\x2\x4A2\x4A7\x5j\x36\x2\x4A3"+
		"\x4A4\a\b\x2\x2\x4A4\x4A6\x5j\x36\x2\x4A5\x4A3\x3\x2\x2\x2\x4A6\x4A9\x3"+
		"\x2\x2\x2\x4A7\x4A5\x3\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8\x4AB\x3\x2"+
		"\x2\x2\x4A9\x4A7\x3\x2\x2\x2\x4AA\x4A0\x3\x2\x2\x2\x4AA\x4AB\x3\x2\x2"+
		"\x2\x4AB\x4AC\x3\x2\x2\x2\x4AC\x4AD\ak\x2\x2\x4AD\x4B0\x5\\/\x2\x4AE\x4AF"+
		"\t\x4\x2\x2\x4AF\x4B1\x5\\/\x2\x4B0\x4AE\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2"+
		"\x2\x4B1\x4B3\x3\x2\x2\x2\x4B2\x4AA\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2"+
		"\x4B3Q\x3\x2\x2\x2\x4B4\x4B5\a\x9E\x2\x2\x4B5S\x3\x2\x2\x2\x4B6\x4B8\x5"+
		"\x9AN\x2\x4B7\x4B9\x5V,\x2\x4B8\x4B7\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2"+
		"\x4B9\x4BD\x3\x2\x2\x2\x4BA\x4BC\x5X-\x2\x4BB\x4BA\x3\x2\x2\x2\x4BC\x4BF"+
		"\x3\x2\x2\x2\x4BD\x4BB\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BEU\x3\x2\x2"+
		"\x2\x4BF\x4BD\x3\x2\x2\x2\x4C0\x4C2\x5\x8EH\x2\x4C1\x4C0\x3\x2\x2\x2\x4C2"+
		"\x4C3\x3\x2\x2\x2\x4C3\x4C1\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4CF"+
		"\x3\x2\x2\x2\x4C5\x4C6\a\x6\x2\x2\x4C6\x4C7\x5\x80\x41\x2\x4C7\x4C8\a"+
		"\a\x2\x2\x4C8\x4D0\x3\x2\x2\x2\x4C9\x4CA\a\x6\x2\x2\x4CA\x4CB\x5\x80\x41"+
		"\x2\x4CB\x4CC\a\b\x2\x2\x4CC\x4CD\x5\x80\x41\x2\x4CD\x4CE\a\a\x2\x2\x4CE"+
		"\x4D0\x3\x2\x2\x2\x4CF\x4C5\x3\x2\x2\x2\x4CF\x4C9\x3\x2\x2\x2\x4CF\x4D0"+
		"\x3\x2\x2\x2\x4D0W\x3\x2\x2\x2\x4D1\x4D2\a\x36\x2\x2\x4D2\x4D4\x5\x8E"+
		"H\x2\x4D3\x4D1\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4F6\x3\x2\x2\x2"+
		"\x4D5\x4D6\a}\x2\x2\x4D6\x4D8\ah\x2\x2\x4D7\x4D9\t\a\x2\x2\x4D8\x4D7\x3"+
		"\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\x4DC\x5Z.\x2"+
		"\x4DB\x4DD\a\'\x2\x2\x4DC\x4DB\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD"+
		"\x4F7\x3\x2\x2\x2\x4DE\x4E0\ar\x2\x2\x4DF\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3"+
		"\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E2\at\x2\x2\x4E2\x4F7\x5Z.\x2\x4E3"+
		"\x4E4\a\x9B\x2\x2\x4E4\x4F7\x5Z.\x2\x4E5\x4E6\a\x30\x2\x2\x4E6\x4E7\a"+
		"\x6\x2\x2\x4E7\x4E8\x5\\/\x2\x4E8\x4E9\a\a\x2\x2\x4E9\x4F7\x3\x2\x2\x2"+
		"\x4EA\x4F1\a?\x2\x2\x4EB\x4F2\x5\x80\x41\x2\x4EC\x4F2\x5\x82\x42\x2\x4ED"+
		"\x4EE\a\x6\x2\x2\x4EE\x4EF\x5\\/\x2\x4EF\x4F0\a\a\x2\x2\x4F0\x4F2\x3\x2"+
		"\x2\x2\x4F1\x4EB\x3\x2\x2\x2\x4F1\x4EC\x3\x2\x2\x2\x4F1\x4ED\x3\x2\x2"+
		"\x2\x4F2\x4F7\x3\x2\x2\x2\x4F3\x4F4\a\x31\x2\x2\x4F4\x4F7\x5\x9CO\x2\x4F5"+
		"\x4F7\x5^\x30\x2\x4F6\x4D5\x3\x2\x2\x2\x4F6\x4DF\x3\x2\x2\x2\x4F6\x4E3"+
		"\x3\x2\x2\x2\x4F6\x4E5\x3\x2\x2\x2\x4F6\x4EA\x3\x2\x2\x2\x4F6\x4F3\x3"+
		"\x2\x2\x2\x4F6\x4F5\x3\x2\x2\x2\x4F7Y\x3\x2\x2\x2\x4F8\x4F9\aw\x2\x2\x4F9"+
		"\x4FA\a\x34\x2\x2\x4FA\x4FC\t\b\x2\x2\x4FB\x4F8\x3\x2\x2\x2\x4FB\x4FC"+
		"\x3\x2\x2\x2\x4FC[\x3\x2\x2\x2\x4FD\x4FE\b/\x1\x2\x4FE\x4FF\x5\x84\x43"+
		"\x2\x4FF\x500\x5\\/\x17\x500\x54A\x3\x2\x2\x2\x501\x54A\x5\x82\x42\x2"+
		"\x502\x54A\a\xA8\x2\x2\x503\x504\x5\x92J\x2\x504\x505\a\x5\x2\x2\x505"+
		"\x507\x3\x2\x2\x2\x506\x503\x3\x2\x2\x2\x506\x507\x3\x2\x2\x2\x507\x508"+
		"\x3\x2\x2\x2\x508\x509\x5\x94K\x2\x509\x50A\a\x5\x2\x2\x50A\x50C\x3\x2"+
		"\x2\x2\x50B\x506\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2\x50C\x50D\x3\x2\x2"+
		"\x2\x50D\x54A\x5\x9AN\x2\x50E\x50F\x5\x90I\x2\x50F\x51C\a\x6\x2\x2\x510"+
		"\x512\a\x46\x2\x2\x511\x510\x3\x2\x2\x2\x511\x512\x3\x2\x2\x2\x512\x513"+
		"\x3\x2\x2\x2\x513\x518\x5\\/\x2\x514\x515\a\b\x2\x2\x515\x517\x5\\/\x2"+
		"\x516\x514\x3\x2\x2\x2\x517\x51A\x3\x2\x2\x2\x518\x516\x3\x2\x2\x2\x518"+
		"\x519\x3\x2\x2\x2\x519\x51D\x3\x2\x2\x2\x51A\x518\x3\x2\x2\x2\x51B\x51D"+
		"\a\n\x2\x2\x51C\x511\x3\x2\x2\x2\x51C\x51B\x3\x2\x2\x2\x51C\x51D\x3\x2"+
		"\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x51F\a\a\x2\x2\x51F\x54A\x3\x2\x2\x2"+
		"\x520\x521\a\x6\x2\x2\x521\x522\x5\\/\x2\x522\x523\a\a\x2\x2\x523\x54A"+
		"\x3\x2\x2\x2\x524\x525\a/\x2\x2\x525\x526\a\x6\x2\x2\x526\x527\x5\\/\x2"+
		"\x527\x528\a$\x2\x2\x528\x529\x5V,\x2\x529\x52A\a\a\x2\x2\x52A\x54A\x3"+
		"\x2\x2\x2\x52B\x52D\ar\x2\x2\x52C\x52B\x3\x2\x2\x2\x52C\x52D\x3\x2\x2"+
		"\x2\x52D\x52E\x3\x2\x2\x2\x52E\x530\aN\x2\x2\x52F\x52C\x3\x2\x2\x2\x52F"+
		"\x530\x3\x2\x2\x2\x530\x531\x3\x2\x2\x2\x531\x532\a\x6\x2\x2\x532\x533"+
		"\x5J&\x2\x533\x534\a\a\x2\x2\x534\x54A\x3\x2\x2\x2\x535\x537\a-\x2\x2"+
		"\x536\x538\x5\\/\x2\x537\x536\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53E"+
		"\x3\x2\x2\x2\x539\x53A\a\xA2\x2\x2\x53A\x53B\x5\\/\x2\x53B\x53C\a\x96"+
		"\x2\x2\x53C\x53D\x5\\/\x2\x53D\x53F\x3\x2\x2\x2\x53E\x539\x3\x2\x2\x2"+
		"\x53F\x540\x3\x2\x2\x2\x540\x53E\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541"+
		"\x544\x3\x2\x2\x2\x542\x543\aI\x2\x2\x543\x545\x5\\/\x2\x544\x542\x3\x2"+
		"\x2\x2\x544\x545\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x547\aJ\x2\x2"+
		"\x547\x54A\x3\x2\x2\x2\x548\x54A\x5`\x31\x2\x549\x4FD\x3\x2\x2\x2\x549"+
		"\x501\x3\x2\x2\x2\x549\x502\x3\x2\x2\x2\x549\x50B\x3\x2\x2\x2\x549\x50E"+
		"\x3\x2\x2\x2\x549\x520\x3\x2\x2\x2\x549\x524\x3\x2\x2\x2\x549\x52F\x3"+
		"\x2\x2\x2\x549\x535\x3\x2\x2\x2\x549\x548\x3\x2\x2\x2\x54A\x5AF\x3\x2"+
		"\x2\x2\x54B\x54C\f\x16\x2\x2\x54C\x54D\a\xE\x2\x2\x54D\x5AE\x5\\/\x17"+
		"\x54E\x54F\f\x15\x2\x2\x54F\x550\t\t\x2\x2\x550\x5AE\x5\\/\x16\x551\x552"+
		"\f\x14\x2\x2\x552\x553\t\n\x2\x2\x553\x5AE\x5\\/\x15\x554\x555\f\x13\x2"+
		"\x2\x555\x556\t\v\x2\x2\x556\x5AE\x5\\/\x14\x557\x558\f\x12\x2\x2\x558"+
		"\x559\t\f\x2\x2\x559\x5AE\x5\\/\x13\x55A\x567\f\x11\x2\x2\x55B\x568\a"+
		"\t\x2\x2\x55C\x568\a\x19\x2\x2\x55D\x568\a\x1A\x2\x2\x55E\x568\a\x1B\x2"+
		"\x2\x55F\x568\a\x65\x2\x2\x560\x561\a\x65\x2\x2\x561\x568\ar\x2\x2\x562"+
		"\x568\a[\x2\x2\x563\x568\aj\x2\x2\x564\x568\aU\x2\x2\x565\x568\al\x2\x2"+
		"\x566\x568\a\x83\x2\x2\x567\x55B\x3\x2\x2\x2\x567\x55C\x3\x2\x2\x2\x567"+
		"\x55D\x3\x2\x2\x2\x567\x55E\x3\x2\x2\x2\x567\x55F\x3\x2\x2\x2\x567\x560"+
		"\x3\x2\x2\x2\x567\x562\x3\x2\x2\x2\x567\x563\x3\x2\x2\x2\x567\x564\x3"+
		"\x2\x2\x2\x567\x565\x3\x2\x2\x2\x567\x566\x3\x2\x2\x2\x568\x569\x3\x2"+
		"\x2\x2\x569\x5AE\x5\\/\x12\x56A\x56B\f\x10\x2\x2\x56B\x56C\a#\x2\x2\x56C"+
		"\x5AE\x5\\/\x11\x56D\x56E\f\xF\x2\x2\x56E\x56F\ax\x2\x2\x56F\x5AE\x5\\"+
		"/\x10\x570\x571\f\b\x2\x2\x571\x573\a\x65\x2\x2\x572\x574\ar\x2\x2\x573"+
		"\x572\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x5AE"+
		"\x5\\/\t\x576\x578\f\a\x2\x2\x577\x579\ar\x2\x2\x578\x577\x3\x2\x2\x2"+
		"\x578\x579\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2\x57A\x57B\a*\x2\x2\x57B\x57C"+
		"\x5\\/\x2\x57C\x57D\a#\x2\x2\x57D\x57E\x5\\/\b\x57E\x5AE\x3\x2\x2\x2\x57F"+
		"\x580\f\v\x2\x2\x580\x581\a\x31\x2\x2\x581\x5AE\x5\x9CO\x2\x582\x584\f"+
		"\n\x2\x2\x583\x585\ar\x2\x2\x584\x583\x3\x2\x2\x2\x584\x585\x3\x2\x2\x2"+
		"\x585\x586\x3\x2\x2\x2\x586\x587\t\r\x2\x2\x587\x58A\x5\\/\x2\x588\x589"+
		"\aK\x2\x2\x589\x58B\x5\\/\x2\x58A\x588\x3\x2\x2\x2\x58A\x58B\x3\x2\x2"+
		"\x2\x58B\x5AE\x3\x2\x2\x2\x58C\x591\f\t\x2\x2\x58D\x592\a\x66\x2\x2\x58E"+
		"\x592\as\x2\x2\x58F\x590\ar\x2\x2\x590\x592\at\x2\x2\x591\x58D\x3\x2\x2"+
		"\x2\x591\x58E\x3\x2\x2\x2\x591\x58F\x3\x2\x2\x2\x592\x5AE\x3\x2\x2\x2"+
		"\x593\x595\f\x6\x2\x2\x594\x596\ar\x2\x2\x595\x594\x3\x2\x2\x2\x595\x596"+
		"\x3\x2\x2\x2\x596\x597\x3\x2\x2\x2\x597\x5AB\a[\x2\x2\x598\x5A2\a\x6\x2"+
		"\x2\x599\x5A3\x5J&\x2\x59A\x59F\x5\\/\x2\x59B\x59C\a\b\x2\x2\x59C\x59E"+
		"\x5\\/\x2\x59D\x59B\x3\x2\x2\x2\x59E\x5A1\x3\x2\x2\x2\x59F\x59D\x3\x2"+
		"\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A3\x3\x2\x2\x2\x5A1\x59F\x3\x2\x2"+
		"\x2\x5A2\x599\x3\x2\x2\x2\x5A2\x59A\x3\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2"+
		"\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5AC\a\a\x2\x2\x5A5\x5A6\x5\x92J\x2\x5A6\x5A7"+
		"\a\x5\x2\x2\x5A7\x5A9\x3\x2\x2\x2\x5A8\x5A5\x3\x2\x2\x2\x5A8\x5A9\x3\x2"+
		"\x2\x2\x5A9\x5AA\x3\x2\x2\x2\x5AA\x5AC\x5\x94K\x2\x5AB\x598\x3\x2\x2\x2"+
		"\x5AB\x5A8\x3\x2\x2\x2\x5AC\x5AE\x3\x2\x2\x2\x5AD\x54B\x3\x2\x2\x2\x5AD"+
		"\x54E\x3\x2\x2\x2\x5AD\x551\x3\x2\x2\x2\x5AD\x554\x3\x2\x2\x2\x5AD\x557"+
		"\x3\x2\x2\x2\x5AD\x55A\x3\x2\x2\x2\x5AD\x56A\x3\x2\x2\x2\x5AD\x56D\x3"+
		"\x2\x2\x2\x5AD\x570\x3\x2\x2\x2\x5AD\x576\x3\x2\x2\x2\x5AD\x57F\x3\x2"+
		"\x2\x2\x5AD\x582\x3\x2\x2\x2\x5AD\x58C\x3\x2\x2\x2\x5AD\x593\x3\x2\x2"+
		"\x2\x5AE\x5B1\x3\x2\x2\x2\x5AF\x5AD\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2"+
		"\x5B0]\x3\x2\x2\x2\x5B1\x5AF\x3\x2\x2\x2\x5B2\x5B3\a\x82\x2\x2\x5B3\x5BF"+
		"\x5\x9EP\x2\x5B4\x5B5\a\x6\x2\x2\x5B5\x5BA\x5\x9AN\x2\x5B6\x5B7\a\b\x2"+
		"\x2\x5B7\x5B9\x5\x9AN\x2\x5B8\x5B6\x3\x2\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA"+
		"\x5B8\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BD\x3\x2\x2\x2\x5BC\x5BA"+
		"\x3\x2\x2\x2\x5BD\x5BE\a\a\x2\x2\x5BE\x5C0\x3\x2\x2\x2\x5BF\x5B4\x3\x2"+
		"\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5D3\x3\x2\x2\x2\x5C1\x5C2\aw\x2\x2"+
		"\x5C2\x5CB\t\xE\x2\x2\x5C3\x5C4\a\x8E\x2\x2\x5C4\x5CC\at\x2\x2\x5C5\x5C6"+
		"\a\x8E\x2\x2\x5C6\x5CC\a?\x2\x2\x5C7\x5CC\a,\x2\x2\x5C8\x5CC\a\x88\x2"+
		"\x2\x5C9\x5CA\aq\x2\x2\x5CA\x5CC\a\x1D\x2\x2\x5CB\x5C3\x3\x2\x2\x2\x5CB"+
		"\x5C5\x3\x2\x2\x2\x5CB\x5C7\x3\x2\x2\x2\x5CB\x5C8\x3\x2\x2\x2\x5CB\x5C9"+
		"\x3\x2\x2\x2\x5CC\x5D0\x3\x2\x2\x2\x5CD\x5CE\al\x2\x2\x5CE\x5D0\x5\x8E"+
		"H\x2\x5CF\x5C1\x3\x2\x2\x2\x5CF\x5CD\x3\x2\x2\x2\x5D0\x5D2\x3\x2\x2\x2"+
		"\x5D1\x5CF\x3\x2\x2\x2\x5D2\x5D5\x3\x2\x2\x2\x5D3\x5D1\x3\x2\x2\x2\x5D3"+
		"\x5D4\x3\x2\x2\x2\x5D4\x5E0\x3\x2\x2\x2\x5D5\x5D3\x3\x2\x2\x2\x5D6\x5D8"+
		"\ar\x2\x2\x5D7\x5D6\x3\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5D9\x3\x2"+
		"\x2\x2\x5D9\x5DE\a@\x2\x2\x5DA\x5DB\a_\x2\x2\x5DB\x5DF\a\x41\x2\x2\x5DC"+
		"\x5DD\a_\x2\x2\x5DD\x5DF\aZ\x2\x2\x5DE\x5DA\x3\x2\x2\x2\x5DE\x5DC\x3\x2"+
		"\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E1\x3\x2\x2\x2\x5E0\x5D7\x3\x2\x2"+
		"\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1_\x3\x2\x2\x2\x5E2\x5E3\a\x80\x2\x2\x5E3"+
		"\x5E8\a\x6\x2\x2\x5E4\x5E9\aY\x2\x2\x5E5\x5E6\t\xF\x2\x2\x5E6\x5E7\a\b"+
		"\x2\x2\x5E7\x5E9\x5\x86\x44\x2\x5E8\x5E4\x3\x2\x2\x2\x5E8\x5E5\x3\x2\x2"+
		"\x2\x5E9\x5EA\x3\x2\x2\x2\x5EA\x5EB\a\a\x2\x2\x5EB\x61\x3\x2\x2\x2\x5EC"+
		"\x5EF\x5\x9AN\x2\x5ED\x5EE\a\x31\x2\x2\x5EE\x5F0\x5\x9CO\x2\x5EF\x5ED"+
		"\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5F2\x3\x2\x2\x2\x5F1\x5F3\t\a"+
		"\x2\x2\x5F2\x5F1\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x63\x3\x2\x2\x2"+
		"\x5F4\x5F5\a\x36\x2\x2\x5F5\x5F7\x5\x8EH\x2\x5F6\x5F4\x3\x2\x2\x2\x5F6"+
		"\x5F7\x3\x2\x2\x2\x5F7\x61C\x3\x2\x2\x2\x5F8\x5F9\a}\x2\x2\x5F9\x5FC\a"+
		"h\x2\x2\x5FA\x5FC\a\x9B\x2\x2\x5FB\x5F8\x3\x2\x2\x2\x5FB\x5FA\x3\x2\x2"+
		"\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x5FE\a\x6\x2\x2\x5FE\x603\x5\x62\x32\x2"+
		"\x5FF\x600\a\b\x2\x2\x600\x602\x5\x62\x32\x2\x601\x5FF\x3\x2\x2\x2\x602"+
		"\x605\x3\x2\x2\x2\x603\x601\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x606"+
		"\x3\x2\x2\x2\x605\x603\x3\x2\x2\x2\x606\x607\a\a\x2\x2\x607\x608\x5Z."+
		"\x2\x608\x61D\x3\x2\x2\x2\x609\x60A\a\x30\x2\x2\x60A\x60B\a\x6\x2\x2\x60B"+
		"\x60C\x5\\/\x2\x60C\x60D\a\a\x2\x2\x60D\x61D\x3\x2\x2\x2\x60E\x60F\aR"+
		"\x2\x2\x60F\x610\ah\x2\x2\x610\x611\a\x6\x2\x2\x611\x616\x5\x9AN\x2\x612"+
		"\x613\a\b\x2\x2\x613\x615\x5\x9AN\x2\x614\x612\x3\x2\x2\x2\x615\x618\x3"+
		"\x2\x2\x2\x616\x614\x3\x2\x2\x2\x616\x617\x3\x2\x2\x2\x617\x619\x3\x2"+
		"\x2\x2\x618\x616\x3\x2\x2\x2\x619\x61A\a\a\x2\x2\x61A\x61B\x5^\x30\x2"+
		"\x61B\x61D\x3\x2\x2\x2\x61C\x5FB\x3\x2\x2\x2\x61C\x609\x3\x2\x2\x2\x61C"+
		"\x60E\x3\x2\x2\x2\x61D\x65\x3\x2\x2\x2\x61E\x620\a\xA4\x2\x2\x61F\x621"+
		"\a\x81\x2\x2\x620\x61F\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x622\x3"+
		"\x2\x2\x2\x622\x623\x5~@\x2\x623\x624\a$\x2\x2\x624\x625\a\x6\x2\x2\x625"+
		"\x626\x5J&\x2\x626\x630\a\a\x2\x2\x627\x628\a\b\x2\x2\x628\x629\x5~@\x2"+
		"\x629\x62A\a$\x2\x2\x62A\x62B\a\x6\x2\x2\x62B\x62C\x5J&\x2\x62C\x62D\a"+
		"\a\x2\x2\x62D\x62F\x3\x2\x2\x2\x62E\x627\x3\x2\x2\x2\x62F\x632\x3\x2\x2"+
		"\x2\x630\x62E\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631g\x3\x2\x2\x2\x632"+
		"\x630\x3\x2\x2\x2\x633\x634\x5\x92J\x2\x634\x635\a\x5\x2\x2\x635\x637"+
		"\x3\x2\x2\x2\x636\x633\x3\x2\x2\x2\x636\x637\x3\x2\x2\x2\x637\x638\x3"+
		"\x2\x2\x2\x638\x642\x5\x94K\x2\x639\x63A\a^\x2\x2\x63A\x63B\a+\x2\x2\x63B"+
		"\x643\x5\xA0Q\x2\x63C\x63E\a$\x2\x2\x63D\x63C\x3\x2\x2\x2\x63D\x63E\x3"+
		"\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x643\x5\xACW\x2\x640\x641\ar\x2\x2"+
		"\x641\x643\a^\x2\x2\x642\x639\x3\x2\x2\x2\x642\x63D\x3\x2\x2\x2\x642\x640"+
		"\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643i\x3\x2\x2\x2\x644\x647\x5\\/\x2"+
		"\x645\x646\a\x31\x2\x2\x646\x648\x5\x9CO\x2\x647\x645\x3\x2\x2\x2\x647"+
		"\x648\x3\x2\x2\x2\x648\x64A\x3\x2\x2\x2\x649\x64B\t\a\x2\x2\x64A\x649"+
		"\x3\x2\x2\x2\x64A\x64B\x3\x2\x2\x2\x64Bk\x3\x2\x2\x2\x64C\x650\x5\x80"+
		"\x41\x2\x64D\x650\x5\x8EH\x2\x64E\x650\a\xA9\x2\x2\x64F\x64C\x3\x2\x2"+
		"\x2\x64F\x64D\x3\x2\x2\x2\x64F\x64E\x3\x2\x2\x2\x650m\x3\x2\x2\x2\x651"+
		"\x65D\x5\x94K\x2\x652\x653\a\x6\x2\x2\x653\x658\x5\x9AN\x2\x654\x655\a"+
		"\b\x2\x2\x655\x657\x5\x9AN\x2\x656\x654\x3\x2\x2\x2\x657\x65A\x3\x2\x2"+
		"\x2\x658\x656\x3\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659\x65B\x3\x2\x2\x2"+
		"\x65A\x658\x3\x2\x2\x2\x65B\x65C\a\a\x2\x2\x65C\x65E\x3\x2\x2\x2\x65D"+
		"\x652\x3\x2\x2\x2\x65D\x65E\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x660"+
		"\a$\x2\x2\x660\x661\a\x6\x2\x2\x661\x662\x5J&\x2\x662\x663\a\a\x2\x2\x663"+
		"o\x3\x2\x2\x2\x664\x671\a\n\x2\x2\x665\x666\x5\x94K\x2\x666\x667\a\x5"+
		"\x2\x2\x667\x668\a\n\x2\x2\x668\x671\x3\x2\x2\x2\x669\x66E\x5\\/\x2\x66A"+
		"\x66C\a$\x2\x2\x66B\x66A\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66D\x3"+
		"\x2\x2\x2\x66D\x66F\x5\x8A\x46\x2\x66E\x66B\x3\x2\x2\x2\x66E\x66F\x3\x2"+
		"\x2\x2\x66F\x671\x3\x2\x2\x2\x670\x664\x3\x2\x2\x2\x670\x665\x3\x2\x2"+
		"\x2\x670\x669\x3\x2\x2\x2\x671q\x3\x2\x2\x2\x672\x673\x5\x92J\x2\x673"+
		"\x674\a\x5\x2\x2\x674\x676\x3\x2\x2\x2\x675\x672\x3\x2\x2\x2\x675\x676"+
		"\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\x67C\x5\x94K\x2\x678\x67A\a$\x2"+
		"\x2\x679\x678\x3\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2"+
		"\x67B\x67D\x5\xACW\x2\x67C\x679\x3\x2\x2\x2\x67C\x67D\x3\x2\x2\x2\x67D"+
		"\x683\x3\x2\x2\x2\x67E\x67F\a^\x2\x2\x67F\x680\a+\x2\x2\x680\x684\x5\xA0"+
		"Q\x2\x681\x682\ar\x2\x2\x682\x684\a^\x2\x2\x683\x67E\x3\x2\x2\x2\x683"+
		"\x681\x3\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684\x6A2\x3\x2\x2\x2\x685\x68F"+
		"\a\x6\x2\x2\x686\x68B\x5r:\x2\x687\x688\a\b\x2\x2\x688\x68A\x5r:\x2\x689"+
		"\x687\x3\x2\x2\x2\x68A\x68D\x3\x2\x2\x2\x68B\x689\x3\x2\x2\x2\x68B\x68C"+
		"\x3\x2\x2\x2\x68C\x690\x3\x2\x2\x2\x68D\x68B\x3\x2\x2\x2\x68E\x690\x5"+
		"t;\x2\x68F\x686\x3\x2\x2\x2\x68F\x68E\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2"+
		"\x691\x696\a\a\x2\x2\x692\x694\a$\x2\x2\x693\x692\x3\x2\x2\x2\x693\x694"+
		"\x3\x2\x2\x2\x694\x695\x3\x2\x2\x2\x695\x697\x5\xACW\x2\x696\x693\x3\x2"+
		"\x2\x2\x696\x697\x3\x2\x2\x2\x697\x6A2\x3\x2\x2\x2\x698\x699\a\x6\x2\x2"+
		"\x699\x69A\x5J&\x2\x69A\x69F\a\a\x2\x2\x69B\x69D\a$\x2\x2\x69C\x69B\x3"+
		"\x2\x2\x2\x69C\x69D\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E\x6A0\x5\xAC"+
		"W\x2\x69F\x69C\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A2\x3\x2\x2\x2"+
		"\x6A1\x675\x3\x2\x2\x2\x6A1\x685\x3\x2\x2\x2\x6A1\x698\x3\x2\x2\x2\x6A2"+
		"s\x3\x2\x2\x2\x6A3\x6AA\x5r:\x2\x6A4\x6A5\x5v<\x2\x6A5\x6A6\x5r:\x2\x6A6"+
		"\x6A7\x5x=\x2\x6A7\x6A9\x3\x2\x2\x2\x6A8\x6A4\x3\x2\x2\x2\x6A9\x6AC\x3"+
		"\x2\x2\x2\x6AA\x6A8\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6ABu\x3\x2\x2\x2"+
		"\x6AC\x6AA\x3\x2\x2\x2\x6AD\x6BB\a\b\x2\x2\x6AE\x6B0\ap\x2\x2\x6AF\x6AE"+
		"\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x6B7\x3\x2\x2\x2\x6B1\x6B3\ai"+
		"\x2\x2\x6B2\x6B4\az\x2\x2\x6B3\x6B2\x3\x2\x2\x2\x6B3\x6B4\x3\x2\x2\x2"+
		"\x6B4\x6B8\x3\x2\x2\x2\x6B5\x6B8\a`\x2\x2\x6B6\x6B8\a\x39\x2\x2\x6B7\x6B1"+
		"\x3\x2\x2\x2\x6B7\x6B5\x3\x2\x2\x2\x6B7\x6B6\x3\x2\x2\x2\x6B7\x6B8\x3"+
		"\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x6BB\ag\x2\x2\x6BA\x6AD\x3\x2\x2"+
		"\x2\x6BA\x6AF\x3\x2\x2\x2\x6BBw\x3\x2\x2\x2\x6BC\x6BD\aw\x2\x2\x6BD\x6CB"+
		"\x5\\/\x2\x6BE\x6BF\a\x9D\x2\x2\x6BF\x6C0\a\x6\x2\x2\x6C0\x6C5\x5\x9A"+
		"N\x2\x6C1\x6C2\a\b\x2\x2\x6C2\x6C4\x5\x9AN\x2\x6C3\x6C1\x3\x2\x2\x2\x6C4"+
		"\x6C7\x3\x2\x2\x2\x6C5\x6C3\x3\x2\x2\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\x6C8"+
		"\x3\x2\x2\x2\x6C7\x6C5\x3\x2\x2\x2\x6C8\x6C9\a\a\x2\x2\x6C9\x6CB\x3\x2"+
		"\x2\x2\x6CA\x6BC\x3\x2\x2\x2\x6CA\x6BE\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2"+
		"\x2\x6CBy\x3\x2\x2\x2\x6CC\x6CE\a\x8D\x2\x2\x6CD\x6CF\t\x6\x2\x2\x6CE"+
		"\x6CD\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D5"+
		"\x5p\x39\x2\x6D1\x6D2\a\b\x2\x2\x6D2\x6D4\x5p\x39\x2\x6D3\x6D1\x3\x2\x2"+
		"\x2\x6D4\x6D7\x3\x2\x2\x2\x6D5\x6D3\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2"+
		"\x6D6\x6E4\x3\x2\x2\x2\x6D7\x6D5\x3\x2\x2\x2\x6D8\x6E2\aS\x2\x2\x6D9\x6DE"+
		"\x5r:\x2\x6DA\x6DB\a\b\x2\x2\x6DB\x6DD\x5r:\x2\x6DC\x6DA\x3\x2\x2\x2\x6DD"+
		"\x6E0\x3\x2\x2\x2\x6DE\x6DC\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E3"+
		"\x3\x2\x2\x2\x6E0\x6DE\x3\x2\x2\x2\x6E1\x6E3\x5t;\x2\x6E2\x6D9\x3\x2\x2"+
		"\x2\x6E2\x6E1\x3\x2\x2\x2\x6E3\x6E5\x3\x2\x2\x2\x6E4\x6D8\x3\x2\x2\x2"+
		"\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E8\x3\x2\x2\x2\x6E6\x6E7\a\xA3\x2\x2\x6E7"+
		"\x6E9\x5\\/\x2\x6E8\x6E6\x3\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6F8\x3"+
		"\x2\x2\x2\x6EA\x6EB\aV\x2\x2\x6EB\x6EC\a+\x2\x2\x6EC\x6F1\x5\\/\x2\x6ED"+
		"\x6EE\a\b\x2\x2\x6EE\x6F0\x5\\/\x2\x6EF\x6ED\x3\x2\x2\x2\x6F0\x6F3\x3"+
		"\x2\x2\x2\x6F1\x6EF\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2\x6F6\x3\x2"+
		"\x2\x2\x6F3\x6F1\x3\x2\x2\x2\x6F4\x6F5\aW\x2\x2\x6F5\x6F7\x5\\/\x2\x6F6"+
		"\x6F4\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F9\x3\x2\x2\x2\x6F8\x6EA"+
		"\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x717\x3\x2\x2\x2\x6FA\x6FB\a\x9F"+
		"\x2\x2\x6FB\x6FC\a\x6\x2\x2\x6FC\x701\x5\\/\x2\x6FD\x6FE\a\b\x2\x2\x6FE"+
		"\x700\x5\\/\x2\x6FF\x6FD\x3\x2\x2\x2\x700\x703\x3\x2\x2\x2\x701\x6FF\x3"+
		"\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x704\x3\x2\x2\x2\x703\x701\x3\x2"+
		"\x2\x2\x704\x713\a\a\x2\x2\x705\x706\a\b\x2\x2\x706\x707\a\x6\x2\x2\x707"+
		"\x70C\x5\\/\x2\x708\x709\a\b\x2\x2\x709\x70B\x5\\/\x2\x70A\x708\x3\x2"+
		"\x2\x2\x70B\x70E\x3\x2\x2\x2\x70C\x70A\x3\x2\x2\x2\x70C\x70D\x3\x2\x2"+
		"\x2\x70D\x70F\x3\x2\x2\x2\x70E\x70C\x3\x2\x2\x2\x70F\x710\a\a\x2\x2\x710"+
		"\x712\x3\x2\x2\x2\x711\x705\x3\x2\x2\x2\x712\x715\x3\x2\x2\x2\x713\x711"+
		"\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x717\x3\x2\x2\x2\x715\x713\x3"+
		"\x2\x2\x2\x716\x6CC\x3\x2\x2\x2\x716\x6FA\x3\x2\x2\x2\x717{\x3\x2\x2\x2"+
		"\x718\x71E\a\x9A\x2\x2\x719\x71A\a\x9A\x2\x2\x71A\x71E\a \x2\x2\x71B\x71E"+
		"\a\x63\x2\x2\x71C\x71E\aL\x2\x2\x71D\x718\x3\x2\x2\x2\x71D\x719\x3\x2"+
		"\x2\x2\x71D\x71B\x3\x2\x2\x2\x71D\x71C\x3\x2\x2\x2\x71E}\x3\x2\x2\x2\x71F"+
		"\x72B\x5\x94K\x2\x720\x721\a\x6\x2\x2\x721\x726\x5\x9AN\x2\x722\x723\a"+
		"\b\x2\x2\x723\x725\x5\x9AN\x2\x724\x722\x3\x2\x2\x2\x725\x728\x3\x2\x2"+
		"\x2\x726\x724\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x729\x3\x2\x2\x2"+
		"\x728\x726\x3\x2\x2\x2\x729\x72A\a\a\x2\x2\x72A\x72C\x3\x2\x2\x2\x72B"+
		"\x720\x3\x2\x2\x2\x72B\x72C\x3\x2\x2\x2\x72C\x7F\x3\x2\x2\x2\x72D\x72F"+
		"\t\n\x2\x2\x72E\x72D\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x730\x3\x2"+
		"\x2\x2\x730\x731\a\xA7\x2\x2\x731\x81\x3\x2\x2\x2\x732\x733\t\x10\x2\x2"+
		"\x733\x83\x3\x2\x2\x2\x734\x735\t\x11\x2\x2\x735\x85\x3\x2\x2\x2\x736"+
		"\x737\a\xA9\x2\x2\x737\x87\x3\x2\x2\x2\x738\x73B\x5\\/\x2\x739\x73B\x5"+
		"T+\x2\x73A\x738\x3\x2\x2\x2\x73A\x739\x3\x2\x2\x2\x73B\x89\x3\x2\x2\x2"+
		"\x73C\x73D\t\x12\x2\x2\x73D\x8B\x3\x2\x2\x2\x73E\x73F\t\x13\x2\x2\x73F"+
		"\x8D\x3\x2\x2\x2\x740\x741\x5\xB0Y\x2\x741\x8F\x3\x2\x2\x2\x742\x743\x5"+
		"\xB0Y\x2\x743\x91\x3\x2\x2\x2\x744\x745\x5\xB0Y\x2\x745\x93\x3\x2\x2\x2"+
		"\x746\x747\x5\xB0Y\x2\x747\x95\x3\x2\x2\x2\x748\x749\x5\xB0Y\x2\x749\x97"+
		"\x3\x2\x2\x2\x74A\x74B\x5\xB0Y\x2\x74B\x99\x3\x2\x2\x2\x74C\x74D\x5\xB0"+
		"Y\x2\x74D\x9B\x3\x2\x2\x2\x74E\x74F\x5\xB0Y\x2\x74F\x9D\x3\x2\x2\x2\x750"+
		"\x751\x5\xB0Y\x2\x751\x9F\x3\x2\x2\x2\x752\x753\x5\xB0Y\x2\x753\xA1\x3"+
		"\x2\x2\x2\x754\x755\x5\xB0Y\x2\x755\xA3\x3\x2\x2\x2\x756\x757\x5\xB0Y"+
		"\x2\x757\xA5\x3\x2\x2\x2\x758\x759\x5\xB0Y\x2\x759\xA7\x3\x2\x2\x2\x75A"+
		"\x75B\x5\xB0Y\x2\x75B\xA9\x3\x2\x2\x2\x75C\x75D\x5\xB0Y\x2\x75D\xAB\x3"+
		"\x2\x2\x2\x75E\x75F\x5\xB0Y\x2\x75F\xAD\x3\x2\x2\x2\x760\x761\x5\xB0Y"+
		"\x2\x761\xAF\x3\x2\x2\x2\x762\x76A\a\xA6\x2\x2\x763\x76A\x5\x8CG\x2\x764"+
		"\x76A\a\xA9\x2\x2\x765\x766\a\x6\x2\x2\x766\x767\x5\xB0Y\x2\x767\x768"+
		"\a\a\x2\x2\x768\x76A\x3\x2\x2\x2\x769\x762\x3\x2\x2\x2\x769\x763\x3\x2"+
		"\x2\x2\x769\x764\x3\x2\x2\x2\x769\x765\x3\x2\x2\x2\x76A\xB1\x3\x2\x2\x2"+
		"\x10D\xB5\xB7\xC2\xC9\xCE\xD4\xD9\xE1\xE7\xEE\xF5\xFA\x100\x106\x108\x12A"+
		"\x131\x139\x143\x14F\x15B\x160\x167\x16D\x172\x178\x17E\x183\x189\x18E"+
		"\x195\x1A0\x1A4\x1AC\x1B0\x1B2\x1B7\x1B9\x1BD\x1C4\x1C7\x1CC\x1D0\x1D5"+
		"\x1DE\x1E1\x1E7\x1E9\x1ED\x1F3\x1F8\x203\x209\x20D\x211\x217\x21C\x225"+
		"\x22C\x232\x236\x23A\x240\x245\x24C\x257\x25A\x25C\x262\x268\x26C\x273"+
		"\x279\x27F\x285\x28A\x296\x29B\x2A6\x2AB\x2AE\x2B5\x2B8\x2BF\x2C8\x2CB"+
		"\x2D1\x2D3\x2D7\x2DF\x2E4\x2EC\x2F1\x2F4\x2FB\x301\x306\x30E\x313\x319"+
		"\x320\x323\x32B\x335\x338\x33E\x340\x343\x356\x35C\x365\x36A\x373\x37E"+
		"\x385\x38B\x391\x39A\x3A1\x3A5\x3A7\x3AB\x3B2\x3B4\x3B8\x3BB\x3C2\x3C9"+
		"\x3CC\x3D6\x3D9\x3DF\x3E1\x3E5\x3EC\x3EF\x3F7\x401\x404\x40A\x40C\x410"+
		"\x417\x420\x424\x426\x42A\x433\x438\x43A\x443\x44E\x455\x458\x45B\x468"+
		"\x476\x47B\x47E\x48B\x499\x49E\x4A7\x4AA\x4B0\x4B2\x4B8\x4BD\x4C3\x4CF"+
		"\x4D3\x4D8\x4DC\x4DF\x4F1\x4F6\x4FB\x506\x50B\x511\x518\x51C\x52C\x52F"+
		"\x537\x540\x544\x549\x567\x573\x578\x584\x58A\x591\x595\x59F\x5A2\x5A8"+
		"\x5AB\x5AD\x5AF\x5BA\x5BF\x5CB\x5CF\x5D3\x5D7\x5DE\x5E0\x5E8\x5EF\x5F2"+
		"\x5F6\x5FB\x603\x616\x61C\x620\x630\x636\x63D\x642\x647\x64A\x64F\x658"+
		"\x65D\x66B\x66E\x670\x675\x679\x67C\x683\x68B\x68F\x693\x696\x69C\x69F"+
		"\x6A1\x6AA\x6AF\x6B3\x6B7\x6BA\x6C5\x6CA\x6CE\x6D5\x6DE\x6E2\x6E4\x6E8"+
		"\x6F1\x6F6\x6F8\x701\x70C\x713\x716\x71D\x726\x72B\x72E\x73A\x769";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MasudaManager
